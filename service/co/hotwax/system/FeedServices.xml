<?xml version="1.0" encoding="UTF-8"?>
<services xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="http://moqui.org/xsd/service-definition-3.xsd">

    <service verb="generate" noun="OMSFeed" transaction-timeout="7200">
        <implements service="org.moqui.impl.SystemMessageServices.consume#SystemMessage"/>
        <actions>
            <!-- Fetch the SystemMessage record -->
            <entity-find-one entity-name="moqui.service.message.SystemMessageAndType" value-field="systemMessage"/>

            <!-- Fetch the systemMessageTypeParameter to send the required parameters in the send service -->
            <entity-find entity-name="moqui.service.message.SystemMessageTypeParameter" list="systemMessageTypeParameters">
                <econdition field-name="systemMessageTypeId" from="systemMessage.systemMessageTypeId"/>
            </entity-find>

            <set field="additionalParameters" from="[:]"/>

            <iterate list="systemMessageTypeParameters" entry="systemMessageTypeParameter">
                <script>additionalParameters.put(systemMessageTypeParameter.parameterName, systemMessageTypeParameter.parameterValue)</script>
            </iterate>

            <entity-find-one entity-name="moqui.basic.Enumeration" value-field="enumValue">
                <field-map field-name="enumId" from="systemMessage.systemMessageTypeId"/>
            </entity-find-one>

            <if condition="!enumValue || !enumValue.relatedEnumId">
                <return error="true" message="Related SystemMessageType to produce for ${systemMessage?.systemMessageTypeId} not defined,  not creating related system message."/>
            </if>

            <entity-find-one entity-name="moqui.service.message.SystemMessageType" value-field="relatedSystemMessageType">
                <field-map field-name="systemMessageTypeId" from="enumValue.relatedEnumId"/>
            </entity-find-one>

            <set field="jsonFilePathRef" from="ec.resource.expand(systemMessage.sendPath, null,
                [contentRoot: ec.user.getPreference('mantle.content.root') ?: 'dbresource://datamanager', date:ec.l10n.format(nowDate, 'yyyy-MM-dd'),
                dateTime:ec.l10n.format(nowDate, 'yyyy-MM-dd-HH-mm-ss')], false)"/>

            <set field="jsonFilePath" from="ec.resource.getLocationReference(jsonFilePathRef).getUri().getPath()"/>

            <script><![CDATA[
                    import com.fasterxml.jackson.core.JsonFactory
                    import com.fasterxml.jackson.core.JsonParser
                    import com.fasterxml.jackson.databind.ObjectMapper
                    import com.fasterxml.jackson.core.JsonToken
                    import com.fasterxml.jackson.core.JsonGenerator
                    import com.fasterxml.jackson.core.util.DefaultPrettyPrinter
                    import java.nio.charset.StandardCharsets
                    import java.io.File

                    File feedFile = new File(jsonFilePath)
                    if (!feedFile.parentFile.exists()) feedFile.parentFile.mkdirs()

                    JsonFactory factory = new JsonFactory()
                    ObjectMapper mapper = new ObjectMapper()

                    try (PrintWriter pw = new PrintWriter(StandardCharsets.UTF_8, feedFile); JsonGenerator jGenerator = factory.createGenerator(pw)) {
                        jGenerator.writeStartArray()

                        try (JsonParser parser = factory.createParser(ec.resource.getLocationReference(systemMessage.messageText).getUrl().openStream())) {
                            if (parser.nextToken() == JsonToken.START_ARRAY) {
                                while (parser.nextToken() == JsonToken.START_OBJECT) {
                                    Map jsonMap = mapper.readValue(parser, Map.class)
                ]]></script>

            <!-- For each json map call the send service configured in systemMessageType -->
            <service-call name="${systemMessage.sendServiceName}" in-map="[payload:jsonMap] + additionalParameters" out-map="responseOut"/>

            <if condition="responseOut.payload">
                <script>
                    new ObjectMapper()
                    .setDateFormat(new java.text.SimpleDateFormat(System.getProperty("default_date_time_format")))
                    .writerWithDefaultPrettyPrinter().writeValue(jGenerator, responseOut.payload)
                </script>
            </if>

            <script>
                            }
                        }
                    }
                        jGenerator.writeEndArray()
                    }catch (IOException e) {
                        logger.error("Error preparing OMS Json Feed file", e)
                    }
            </script>

            <service-call name="create#moqui.service.message.SystemMessage" in-map="[systemMessageTypeId:relatedSystemMessageType.systemMessageTypeId,
                messageText:jsonFilePathRef, remoteMessageId: jsonFilePathRef.substring(jsonFilePathRef.lastIndexOf('/')+1),
                parentMessageId:systemMessageId, statusId:'SmsgReceived', isOutgoing:'N', initDate:ec.user.nowTimestamp]" out-map="context"/>
        </actions>
    </service>

    <service verb="consume" noun="NetsuiteFeed" transaction-timeout="7200">
        <description>Service to consume the Netsuite Feed.</description>
        <implements service="org.moqui.impl.SystemMessageServices.consume#SystemMessage"/>
        <actions>
            <!-- Fetch the systemMessage from the incoming systemMessageId -->
            <entity-find-one entity-name="moqui.service.message.SystemMessage" value-field="systemMessage">
                <field-map field-name="systemMessageId"/>
            </entity-find-one>

            <!-- Find SystemMessageType related to systemMessage.systemMessageType to produce corresponding system message -->
            <entity-find-one entity-name="moqui.basic.Enumeration" value-field="enumValue">
                <field-map field-name="enumId" from="systemMessage.systemMessageTypeId"/>
            </entity-find-one>

            <!-- If no enumValue then return -->
            <if condition="!enumValue || !enumValue.relatedEnumId">
                <return error="true" message="Related SystemMessageType to produce for ${systemMessage?.systemMessageTypeId} not defined,  not producing related system message."/>
            </if>

            <!-- Fetch the related systemMessageType -->
            <entity-find-one entity-name="moqui.service.message.SystemMessageType" value-field="relatedSystemMessageType">
                <field-map field-name="systemMessageTypeId" from="enumValue.relatedEnumId"/>
            </entity-find-one>

            <!-- If no related systemMessageType then return -->
            <if condition="!relatedSystemMessageType"><return error="true" message="Could not find SystemMessageType with ID ${enumValue.relatedEnumId}, not producing related system message."/></if>

            <!-- Call the receive#IncomingSystemMessage service to further consume feed -->
            <service-call name="org.moqui.impl.SystemMessageServices.receive#IncomingSystemMessage" in-map="[systemMessageTypeId:relatedSystemMessageType.systemMessageTypeId, messageText:systemMessage.messageText, remoteMessageId:systemMessageId]"/>
        </actions>
    </service>

</services>