<?xml version="1.0" encoding="UTF-8"?>
<services xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="http://moqui.org/xsd/service-definition-3.xsd">

    <service verb="map" noun="WhTransferOrderFulfillment" transaction-timeout="1800">
        <description>
            Service to map Warehouse to Store Transfer Order Fulfillment from NetSuite in OMS.
            The Warehouse TOs are fulfilled by third party, and so shipments in OMS will be created in Shipped Status.
        </description>
        <in-parameters>
            <parameter name="payload" type="Map" required="true">
                <description>The Transfer Order Fulfillment map from NetSuite to be mapped as per Shipment in OMS.</description>
                <parameter name="transferOrderId"/>
                <parameter name="externalId"/>
                <parameter name="trackingNumber"/>
                <parameter name="items" type="List">
                    <parameter name="itemMap" type="Map">
                        <parameter name="externalId"/>
                        <parameter name="productIdType"/>
                        <parameter name="productIdValue"/>
                        <parameter name="quantity" type="Integer"/>
                    </parameter>
                </parameter>
            </parameter>
        </in-parameters>
        <out-parameters>
            <parameter name="payload" type="Map">
                <description>The Shipment map with mapped fields for OMS.</description>
                <parameter name="orderId"/>
                <parameter name="externalId"/>
                <parameter name="trackingNumber"/>
                <parameter name="shipmentStatusId"/>
                <parameter name="items" type="List">
                    <parameter name="itemMap" type="Map">
                        <parameter name="orderItemSeqId"/>
                        <parameter name="shipGroupSeqId"/>
                        <parameter name="externalId"/>
                        <parameter name="productId"/>
                        <parameter name="quantity" type="Integer"/>
                    </parameter>
                </parameter>
            </parameter>
        </out-parameters>
        <actions>
            <!-- By default, external fulfilled shipments for WH TOs will be created in SHIPMENT_SHIPPED status -->
            <set field="payload.shipmentStatusId" value="SHIPMENT_SHIPPED"/>

            <!-- Get HC Order ID -->
            <entity-find entity-name="org.apache.ofbiz.order.order.OrderHeader" list="orderList">
                <econdition field-name="externalId" from="payload.remove('transferOrderId')"/>
            </entity-find>
            <set field="payload.orderId" from="orderList?.first?.orderId"/>

            <iterate list="payload.items" entry="item">
                <!-- Get HC Product ID -->
                <entity-find entity-name="org.apache.ofbiz.product.product.GoodIdentification" list="goodIdentifications" limit="1">
                    <econdition field-name="goodIdentificationTypeId" from="item.remove('productIdType')"/>
                    <econdition field-name="idValue" from="item.remove('productIdValue')"/>
                    <date-filter/>
                    <order-by field-name="-fromDate"/>
                </entity-find>
                <set field="item.productId" from="goodIdentifications?.first?.productId"/>

                <!-- Get Order Item Seq ID and Ship Group Seq ID -->
                <entity-find entity-name="org.apache.ofbiz.order.order.OrderItem" list="orderItemList">
                    <econdition field-name="orderId" from="payload.orderId"/>
                    <econdition field-name="productId" from="item.productId"/>
                </entity-find>
                <set field="item.orderItemSeqId" from="orderItemList?.first?.orderItemSeqId"/>
                <set field="item.shipGroupSeqId" from="orderItemList?.first?.shipGroupSeqId"/>
            </iterate>
        </actions>
    </service>

    <service verb="map" noun="StoreTransferOrderFulfillment" transaction-timeout="1800">
        <in-parameters>
            <parameter name="payload" type="Map" required="true">
                <description>The Transfer Order Fulfillment map from NetSuite to be mapped as per Shipment in OMS.</description>
                <parameter name="shipmentId"/>
                <parameter name="externalId"/>
                <parameter name="items" type="List">
                    <parameter name="itemMap" type="Map">
                        <parameter name="externalId"/>
                        <parameter name="productIdType"/>
                        <parameter name="productIdValue"/>
                    </parameter>
                </parameter>
            </parameter>
        </in-parameters>
        <out-parameters>
            <parameter name="payload" type="Map">
                <description>The Shipment map with mapped fields for OMS.</description>
                <parameter name="shipmentId"/>
                <parameter name="externalId"/>
                <parameter name="items" type="List">
                    <parameter name="itemMap" type="Map">
                        <parameter name="shipmentItemSeqId"/>
                        <parameter name="externalId"/>
                        <parameter name="productId"/>
                    </parameter>
                </parameter>
            </parameter>
        </out-parameters>
        <actions>
            <iterate list="payload.items" entry="item">
                <!-- Get HC Product ID -->
                <entity-find entity-name="org.apache.ofbiz.product.product.GoodIdentification" list="goodIdentifications" limit="1">
                    <econdition field-name="goodIdentificationTypeId" from="item.remove('productIdType')"/>
                    <econdition field-name="idValue" from="item.remove('productIdValue')"/>
                    <date-filter/>
                    <order-by field-name="-fromDate"/>
                </entity-find>
                <set field="item.productId" from="goodIdentifications?.first?.productId"/>

                <!-- Get shipment Item Seq ID  -->
                <entity-find entity-name="org.apache.ofbiz.shipment.shipment.ShipmentItem" list="shipmentItemList">
                    <econdition field-name="shipmentId" from="payload.shipmentId"/>
                    <econdition field-name="productId" from="item.productId"/>
                </entity-find>
                <set field="item.shipmentItemSeqId" from="shipmentItemList?.first?.shipmentItemSeqId"/>
            </iterate>
        </actions>
    </service>

    <service verb="generate" noun="TransferOrderShipmentFeed" authenticate="anonymous-all" transaction-timeout="7200">
        <description>
            Service to generate Transfer Order Shipment Feed.
        </description>
        <in-parameters>
            <parameter name="systemMessageRemoteId" required="true">
                <description>The System Message Remote ID for generating the Transfer Order Shipment Feed.</description>
            </parameter>
            <parameter name="systemMessageTypeId" required="true">
                <description>The System Message Type ID for generating the Transfer Order Shipment Feed.</description>
            </parameter>
            <parameter name="orderId">
                <description>Parameter to fetch the Transfer Order Shipment details for a specific orderId.</description>
            </parameter>
            <parameter name="orderItemSeqId">
                <description>Parameter to fetch Transfer Order Shipment item details for a specific orderItemSeqId.</description>
            </parameter>
            <parameter name="productStoreIds" type="List">
                <description>
                    List of product Store Ids for generating Transfer Order Shipment feed.
                    For passing the Product Store Ids as list.
                </description>
            </parameter>
            <parameter name="parentFacilityTypeIds" type="List">
                <description>
                    List of parent Facility Type Ids for generating Transfer Order Shipment Feed.
                    For passing the parent Facility Type Ids as list, add values like - PHYSICAL_STORE,DISTRIBUTION_CENTER,VIRTUAL_FACILITY and for single value use - PHYSICAL_STORE.
                </description>
            </parameter>
        </in-parameters>
        <actions>
            <set field="nowDate" from="ec.user.nowTimestamp"/>
            <log message="Generating Transfer Order Shipment Feed file of HotWax for Order ${orderId}, at time ${nowDate}"/>

            <script>
                import com.fasterxml.jackson.core.JsonGenerator
                import com.fasterxml.jackson.core.JsonFactory
                import com.fasterxml.jackson.databind.ObjectMapper
                import java.nio.charset.StandardCharsets
                import org.moqui.entity.EntityCondition

                // Dynamic view to retrieve eligible transfer orders for the transfer order shipment feed
                def transferOrderShipment_find = ec.entity.find("org.apache.ofbiz.order.order.OrderHeader")
                dynamicView = transferOrderShipment_find.makeEntityDynamicView()
                dynamicView.setEntityName("TransferOrderShipment")

                dynamicView.addMemberEntity("OH", "org.apache.ofbiz.order.order.OrderHeader", null, null, null)
                dynamicView.addMemberEntity("OI", "org.apache.ofbiz.order.order.OrderItem","OH", false,["orderId":"orderId"])
                dynamicView.addMemberEntity("OISG", "org.apache.ofbiz.order.order.OrderItemShipGroup",  "OI", false, ["shipGroupSeqId":"shipGroupSeqId","orderId":"orderId"])

                dynamicView.addMemberEntity("F", "org.apache.ofbiz.product.facility.Facility", "OISG", false, ["facilityId":"facilityId"])
                dynamicView.addMemberEntity("FT", "org.apache.ofbiz.product.facility.FacilityType", "F",  false, ["facilityTypeId":"facilityTypeId"])

                dynamicView.addMemberEntity("OSH", "org.apache.ofbiz.order.order.OrderShipment","OI", false,["shipGroupSeqId":"shipGroupSeqId","orderId":"orderId", "orderItemSeqId":"orderItemSeqId"])

                dynamicView.addMemberEntity("SH", "org.apache.ofbiz.shipment.shipment.Shipment", "OSH", false, ["shipmentId":"shipmentId"])
                dynamicView.addMemberEntity("SRS", "org.apache.ofbiz.shipment.shipment.ShipmentRouteSegment", "SH", false, ["shipmentId":"shipmentId"])

                dynamicView.addMemberEntity("OFH", "co.hotwax.integration.order.OrderFulfillmentHistory", "OSH", true, ["shipmentId":"shipmentId","orderId":"orderId", "orderItemSeqId":"orderItemSeqId"])

                dynamicView.addAlias("OH", "orderId")
                dynamicView.addAlias("OH", "orderTypeId")
                dynamicView.addAlias("OH", "orderExternalId", "externalId", null)
                dynamicView.addAlias("OSH", "shipmentId")
                dynamicView.addAlias("SRS", "trackingIdNumber")
                dynamicView.addAlias("SH", "shipmentStatusId", "statusId", null)
                dynamicView.addAlias("FT", "parentFacilityTypeId", "parentTypeId", null)
                dynamicView.addAlias("OFH", "fulfillmentLogId")

                transferOrderShipment_find.condition("shipmentStatusId", "SHIPMENT_SHIPPED")
                transferOrderShipment_find.condition("fulfillmentLogId", EntityCondition.IS_NULL, null)
                transferOrderShipment_find.condition("orderTypeId", "TRANSFER_ORDER")

                if(orderId) transferOrderShipment_find.condition("orderId", orderId)
                if(orderItemSeqId) transferOrderShipment_find.condition("orderItemSeqId", orderItemSeqId)
                if(productStoreIds) transferOrderShipment_find.condition("productStoreId",EntityCondition.ComparisonOperator.IN, productStoreIds)
                if(parentFacilityTypeIds) transferOrderShipment_find.condition("parentFacilityTypeId",EntityCondition.ComparisonOperator.IN, parentFacilityTypeIds)
                transferOrderShipment_find.selectField("shipmentId,orderExternalId,trackingIdNumber")
                transferOrderShipment_find.distinct(true)

                // Using try-with-resources to automatically close the EntityListIterator 'transferOrderShipmentItr'
                try (transferOrderShipmentItr = transferOrderShipment_find.iterator()) {
            </script>

            <!-- If no shipments in transferOrderShipmentItr, then don't generate the file -->
            <if condition="!transferOrderShipmentItr.hasNext()">
                <return message="No eligible orders for Transfer Order Shipment Feed at ${nowDate}, not generating the TO Shipment Feed File for NetSuite."/>
            </if>

            <!-- Fetch the receivePath from SystemMessageType to prepare the path for creating the file in the receiving system. Ex: Moqui's datamanager directory in runtime for creating feeds.-->
            <entity-find-one entity-name="moqui.service.message.SystemMessageType" value-field="systemMessageType"/>
            <if condition="systemMessageType == null"><return error="true" message="Could not find SystemMessageType with ID ${systemMessageTypeId}"/></if>

            <!-- Prepare Transfer Order Shipment Feed JSON File Path -->
            <!-- Using receivePath from SystemMessageType to prepare the jsonFilePathRef.-->
            <set field="jsonFilePathRef" from="ec.resource.expand(systemMessageType.receivePath, null,
                [contentRoot: ec.user.getPreference('mantle.content.root') ?: 'dbresource://datamanager', date:ec.l10n.format(nowDate, 'yyyy-MM-dd'),
                dateTime:ec.l10n.format(nowDate, 'yyyy-MM-dd-HH-mm-ss-SSS')], false)"/>

            <set field="jsonFilePath" from="ec.resource.getLocationReference(jsonFilePathRef).getUri().getPath()"/>

            <!-- Prepare the Transfer Order Shipment Feed file  -->
            <script>
                try {
                //json file
                File transferOrderShipmentFeedFile = new File(jsonFilePath)
                if (!transferOrderShipmentFeedFile.parentFile.exists()) transferOrderShipmentFeedFile.parentFile.mkdirs()
                JsonFactory jfactory = new JsonFactory()

                /* Declaring the PrintWriter and JsonGenerator resources in the try statement,
                so that they are automatically closed regardless of whether the try statement completes normally or abruptly. */
                try (PrintWriter pw = new PrintWriter(StandardCharsets.UTF_8, transferOrderShipmentFeedFile);
                    JsonGenerator jGenerator = jfactory.createGenerator(pw)) {
                        jGenerator.writeStartArray()
            </script>

            <iterate list="transferOrderShipmentItr" entry="shippedTransferOrder">

                <set field="shipmentMap" from="[orderId:shippedTransferOrder.orderExternalId, trackingNumber:shippedTransferOrder.trackingIdNumber, shipmentId:shippedTransferOrder.shipmentId]"/>
                <set field="items" from="[]"/>

                <script>
                    // dynamicView to fetch item details for eligible shipmentId
                    def entityFind = ec.entity.find("org.apache.ofbiz.order.order.OrderShipment")
                    dynamicView = entityFind.makeEntityDynamicView()
                    dynamicView.setEntityName("transferOrderItems")

                    dynamicView.addMemberEntity("OSH", "org.apache.ofbiz.order.order.OrderShipment", null, null, null)
                    dynamicView.addMemberEntity("OI", "org.apache.ofbiz.order.order.OrderItem", "OSH", false, ["shipGroupSeqId":"shipGroupSeqId","orderId":"orderId", "orderItemSeqId":"orderItemSeqId"])

                    dynamicView.addAlias("OI", "orderId")
                    dynamicView.addAlias("OI", "orderItemSeqId")
                    dynamicView.addAlias("OI", "orderItemExternalId", "externalId", null)
                    dynamicView.addAlias("OSH", "shipmentId")
                    dynamicView.addAlias("OSH", "shippedQuantity", "quantity", null)

                    entityFind.condition("shipmentId", shippedTransferOrder.shipmentId)
                    try (shippedItems = entityFind.iterator()) {
                </script>

                <iterate list="shippedItems" entry="shippedItem">

                    <set field="itemMap" from="[lineId:shippedItem.orderItemExternalId, quantity:shippedItem.shippedQuantity, tags:'hotwax-fulfilled']"/>
                    <script>items.add(itemMap)</script>

                    <!-- Create Order Fulfillment History record for each order item included in the feed -->
                    <service-call name="create#co.hotwax.integration.order.OrderFulfillmentHistory" in-map="[orderId:shippedItem.orderId,
                        orderItemSeqId:shippedItem.orderItemSeqId, shipmentId:shippedItem.shipmentId,
                        comments:'Order Item sent as part of Transfer Order Shipment Feed', createdDate:nowDate,
                        externalFulfillmentId:'_NA_']"/>

                </iterate>
                <script>
                    }
                </script>

                <set field="shipmentMap.items" from="items"/>

                <script>
                    new ObjectMapper()
                    .setDateFormat(new java.text.SimpleDateFormat(System.getProperty('default_date_time_format')))
                    .writerWithDefaultPrettyPrinter().writeValue(jGenerator, shipmentMap)
                </script>
            </iterate>
            <script>
                            jGenerator.writeEndArray()
                        }
                    }
                    catch (IOException e) {
                        logger.info("Error preparing transfer order shipment Feed file", e)
                    }
                }
            </script>

            <!-- Save the Json Feed File path in System Message messageText -->
            <service-call name="org.moqui.impl.SystemMessageServices.queue#SystemMessage"
                in-map="[systemMessageTypeId:systemMessageTypeId, systemMessageRemoteId:systemMessageRemoteId,
                messageText:jsonFilePathRef, productStoreId:productStoreId]" out-map="fulfillmentFeedSysMsgOut"/>

            <return message="Completed Transfer Order Shipment Feed file at time ${ec.user.nowTimestamp} with type ${systemMessageTypeId} and
                remote ${systemMessageRemoteId} saved response in messages ${fulfillmentFeedSysMsgOut?.systemMessageId}"/>
        </actions>
    </service>
</services>
