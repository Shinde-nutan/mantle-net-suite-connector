<?xml version="1.0" encoding="UTF-8"?>
<services xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="http://moqui.org/xsd/service-definition-3.xsd">

    <service verb="generate" noun="TransferOrderShipmentReceiptFeed" authenticate="anonymous-all" transaction-timeout="7200">
        <in-parameters>
            <parameter name="shipmentId">
                <description>Parameter to fetch Shipment details for a specific shipmentId.</description>
            </parameter>
            <parameter name="systemMessageRemoteId" required="true">
                <description>The System Message Remote ID to send Shipment Receipt Feed.</description>
            </parameter>
            <parameter name="systemMessageTypeId" required="true">
                <description>The System Message Type ID for generating Shipment Receipt Feed.</description>
            </parameter>
            <parameter name="sinceReceivedDate">
                <description>Parameter to fetch Shipment Receipt details received after a specific date.</description>
            </parameter>
            <parameter name="productStoreIds" type="List">
                <description>
                    List of product Store Ids for generating Shipment Receipt feed.
                    For passing the Product Store Ids as list, add values like - SM_STORE,SG_STORE and for single value use - SM_STORE.
                </description>
            </parameter>
        </in-parameters>
        <actions>
            <set field="nowDate" from="ec.user.nowTimestamp"/>
            <log message="Generating Shipments Receipt Feed file for Shipment ${shipmentId} at time ${nowDate}"/>

            <script>
                import com.fasterxml.jackson.core.JsonGenerator
                import com.fasterxml.jackson.core.JsonFactory
                import com.fasterxml.jackson.databind.ObjectMapper
                import java.nio.charset.StandardCharsets
                import org.moqui.entity.EntityCondition

                // Dynamic view to retrieve eligible Transfer Order Shipment for the Transfer Order Shipment Receipt feed.

                def shipmentReceipt_find = ec.entity.find("org.apache.ofbiz.shipment.receipt.ShipmentReceipt")
                dynamicView = shipmentReceipt_find.makeEntityDynamicView()
                dynamicView.setEntityName("TransferOrderShipmentReceipt")

                dynamicView.addMemberEntity("SR", "org.apache.ofbiz.shipment.receipt.ShipmentReceipt", null, null, null)
                dynamicView.addMemberEntity("SH", "org.apache.ofbiz.shipment.shipment.Shipment","SR", false,["shipmentId":"shipmentId"])
                dynamicView.addMemberEntity("SI", "org.apache.ofbiz.shipment.shipment.ShipmentItem","S", false,["shipmentId":"shipmentId"])

                dynamicView.addMemberEntity("OH", "org.apache.ofbiz.order.order.OrderHeader", "SH", false, ["primaryOrderId":"orderId"])
                dynamicView.addMemberEntity("SRH", "co.hotwax.integration.shipment.ShipmentReceiptHistory", "SR", true, ["receiptId":"receiptId"])

                dynamicView.addAlias("SH", "shipmentExternalId", "externalId", null)
                dynamicView.addAlias("SH", "shipmentId")
                dynamicView.addAlias("SH", "shipmentTypeId")
                dynamicView.addAlias("OH", "productStoreId")
                dynamicView.addAlias("OH", "orderExternalId", "externalId", null)
                dynamicView.addAlias("SRH", "shipmentReceiptHistoryId")

                shipmentReceipt_find.condition("shipmentReceiptHistoryId", EntityCondition.IS_NULL, null)

                shipmentReceipt_find.condition("shipmentTypeId", "OUT_TRANSFER")

                if(shipmentId) shipmentReceipt_find.condition("shipmentId", shipmentId)
                if(productStoreIds) shipmentReceipt_find.condition("productStoreId",EntityCondition.ComparisonOperator.IN, productStoreIds)
                if(sinceReceivedDate) shipmentReceipt_find.havingCondition(ec.entity.conditionFactory.makeCondition("receivedDate", EntityCondition.ComparisonOperator.GREATER_THAN, sinceReceivedDate))
                shipmentReceipt_find.selectField("shipmentId,orderExternalId,shipmentExternalId")
                shipmentReceipt_find.distinct(true)

                // Using try-with-resources to automatically close the EntityListIterator 'shipmentReceiptItr'
                try (shipmentReceiptItr = shipmentReceipt_find.iterator()) {
            </script>

            <!-- If no transfer order in shipmentReceiptItr, then don't generate the file -->
            <if condition="!shipmentReceiptItr.hasNext()">
                <return message="No eligible Transfer Order for Shipments Receipts Feed at ${nowDate}, not generating the TO Shipment Receipt Feed File for NetSuite."/>
            </if>

            <!-- Fetch the receivePath from SystemMessageType to prepare the path for creating the file in the receiving system. Ex: Moqui's datamanager directory in runtime for creating feeds.-->
            <entity-find-one entity-name="moqui.service.message.SystemMessageType" value-field="systemMessageType"/>
            <if condition="systemMessageType == null"><return error="true" message="Could not find SystemMessageType with ID ${systemMessageTypeId}"/></if>

            <!-- Prepare Shipment Receipt JSON File Path -->
            <!-- Using receivePath from SystemMessageType to prepare the jsonFilePathRef.-->
            <set field="jsonFilePathRef" from="ec.resource.expand(systemMessageType.receivePath, null,
                [contentRoot: ec.user.getPreference('mantle.content.root') ?: 'dbresource://datamanager', date:ec.l10n.format(nowDate, 'yyyy-MM-dd'),
                dateTime:ec.l10n.format(nowDate, 'yyyy-MM-dd-HH-mm-ss-SSS')], false)"/>
            <set field="jsonFilePath" from="ec.resource.getLocationReference(jsonFilePathRef).getUri().getPath()"/>

            <!-- Prepare the Shipment Receipt Feed file -->
            <script>
                try {
                //json file
                File shipmentsReceiptFeedFile = new File(jsonFilePath)
                if (!shipmentsReceiptFeedFile.parentFile.exists()) shipmentsReceiptFeedFile.parentFile.mkdirs()
                JsonFactory jfactory = new JsonFactory()

                /* Declaring the PrintWriter and JsonGenerator resources in the the try statement,
                so that they are automatically closed regardless of whether the try statement completes normally or abruptly. */
                try (PrintWriter pw = new PrintWriter(StandardCharsets.UTF_8, shipmentsReceiptFeedFile);
                JsonGenerator jGenerator = jfactory.createGenerator(pw)) {
                    jGenerator.writeStartArray()
            </script>

            <iterate list="shipmentReceiptItr" entry="shipmentReceipt">
                <log message="Processing Shipment Receipt ${shipmentReceipt.shipmentExternalId}"/>

                <set field="shipmentReceiptDetails" from="[order_id:shipmentReceipt.orderExternalId,fulfillment_id:shipmentReceipt.shipmentExternalId]" type="NewMap"/>
                <set field="items" from="[]"/>

                <script>
                    // dynamicView to fetch item details for eligible shipmentId

                    def entity_find = ec.entity.find("org.apache.ofbiz.shipment.receipt.ShipmentReceipt")
                    dynamicView = entity_find.makeEntityDynamicView()

                    dynamicView.addMemberEntity("SR", "org.apache.ofbiz.shipment.receipt.ShipmentReceipt", null, null, null)
                    dynamicView.addMemberEntity("SI", "org.apache.ofbiz.shipment.shipment.ShipmentItem","SR", false,["shipmentId":"shipmentId","shipmentItemSeqId":"shipmentItemSeqId"])
                    dynamicView.addMemberEntity("SRH", "co.hotwax.integration.shipment.ShipmentReceiptHistory", "SR", true, ["receiptId":"receiptId"])

                    dynamicView.addAlias("SI", "productId")
                    dynamicView.addAlias("SI", "shipmentId")
                    dynamicView.addAlias("SI", "shipmentItemExternalId", "externalId", null)
                    dynamicView.addAlias("SR", "totalQuantityAccepted", "quantityAccepted", null)
                    dynamicView.addAlias("SR", "receiptId")
                    dynamicView.addAlias("SRH", "shipmentReceiptHistoryId")

                    entity_find.condition("shipmentReceiptHistoryId", EntityCondition.IS_NULL, null)
                    entity_find.condition("shipmentId", shipmentReceipt.shipmentId)
                    entity_find.selectField("shipmentItemExternalId,productId,totalQuantityAccepted,receiptId")

                    // Using try-with-resources to automatically close the EntityListIterator 'shipmentReceiptItemItr'
                    try (shipmentReceiptItemItr = entity_find.iterator()) {
                </script>

                <iterate list="shipmentReceiptItemItr" entry="shipmentReceiptItem">

                    <entity-find entity-name="org.apache.ofbiz.product.product.GoodIdentification" list="goodIdentificationList">
                        <econdition field-name="productId" from="shipmentReceiptItem.productId"/>
                        <econdition field-name="goodIdentificationTypeId" value="NETSUITE_PRODUCT_ID"/>
                        <date-filter/>
                    </entity-find>

                    <script>
                        itemMap = [lineId:shipmentReceiptItem.shipmentItemExternalId, quantity:shipmentReceiptItem.totalQuantityAccepted, productId:goodIdentificationList?.first?.idValue]
                        items.add(itemMap)
                    </script>

                    <service-call name="create#co.hotwax.integration.shipment.ShipmentReceiptHistory" in-map="[receiptId:shipmentReceiptItem.receiptId,
                        comments:'Order Item sent as part of Transfer Order Shipment Receipt Feed', createdDate:nowDate]" out-map="shipmentReceiptHistory"/>

                </iterate>
                <script>
                    }
                </script>

                <set field="shipmentReceiptDetails.items" from="items"/>

                <script>
                    new ObjectMapper()
                        .setDateFormat(new java.text.SimpleDateFormat(System.getProperty('default_date_time_format')))
                        .writerWithDefaultPrettyPrinter().writeValue(jGenerator, shipmentReceiptDetails)
                </script>
            </iterate>
            <script>
                            jGenerator.writeEndArray()
                        }
                    } catch (IOException e) {
                        logger.info("Error preparing Shipments Receipt Feed file", e)
                    }
                }
            </script>

            <!-- Call queue#SystemMessage that will save the json file path in messageText and
            send the file to sftp using send service configured in SystemMessageType -->
            <service-call name="org.moqui.impl.SystemMessageServices.queue#SystemMessage"
                in-map="[systemMessageTypeId:systemMessageTypeId, systemMessageRemoteId:systemMessageRemoteId,
                messageText:jsonFilePathRef, productStoreId:productStoreId]" out-map="shipmentsReceiptFeedSysMsgOut"/>

            <return message="Completed the Shipments Receipt Feed file at time ${ec.user.nowTimestamp} with type ${systemMessageTypeId} and
                remote ${systemMessageRemoteId} saved response in messages ${shipmentsReceiptFeedSysMsgOut?.systemMessageId}"/>
        </actions>
    </service>

</services>