<?xml version="1.0" encoding="UTF-8"?>
<services xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="http://moqui.org/xsd/service-definition-3.xsd">
    <service verb="generate" noun="NewOrdersSyncFeed" authenticate="anonymous-all" transaction-timeout="7200">
        <in-parameters>
            <parameter name="orderId">
                <description>Parameter to fetch Order details for a specific orderId.</description>
            </parameter>
            <parameter name="filePathPattern" required="true"/>
            <parameter name="systemMessageRemoteId" required="true">
                <description>The System Message Remote Id for generating the Orders Feed for Netsuite.</description>
            </parameter>
            <parameter name="fromOrderDate">
                <description>Parameter to fetch Order details after specific order date</description>
            </parameter>
            <parameter name="thruOrderDate">
                <description>Parameter to fetch Order details after specific order date</description>
            </parameter>
            <parameter name="includeShipmentMethod" type="List">
                <description>
                    Parameter to fetch Order details for specific shipment method or a list of shipping method
                    like: POS_COMPLETED,STORE_PICKUP
                </description>
            </parameter>
            <parameter name="excludeShipmentMethod" type="List">
                <description>Parameter to exclude the Orders from the specific shipment method or a list of shipping method
                    like: POS_COMPLETED,STORE_PICKUP
                </description>
            </parameter>
            <parameter name="includeSalesChannel" type="List">
                <description>Parameter to fetch Order details for specific sales channel or a list of sales channel.</description>
            </parameter>
            <parameter name="excludeSalesChannel" type="List">
                <description>Parameter to exclude the Orders from the specific sales channel or a list of sales channel.</description>
            </parameter>
            <parameter name="isMixCartOrder">
                <description>
                    Parameter to include or exclude the orders which have multiple shipping methods.
                    Example: Y to include the order with multiple shipping methods.
                    N to not include the order with multiple shipping methods.
                </description>
            </parameter>
            <parameter name="scriptPath">
                <description>
                    Path to the groovy script which will be used to generate the Feed File.
                </description>
            </parameter>
            <parameter name="ordersCountPerFeed" type="Integer" default-value="500"/>
        </in-parameters>
        <actions>
            <set field="nowTimestamp" from="ec.user.nowTimestamp"/>
            <log message="Generating Order Feed file for Order ${orderId} at time ${nowTimestamp}"/>
            <script>
                import java.nio.file.Files
                import java.nio.file.Paths
                import java.nio.charset.StandardCharsets
                import org.moqui.entity.EntityCondition
                import co.hotwax.netsuite.NetSuiteMappingWorker
                import co.hotwax.util.CsvWriteHelper

                findNetSuiteOrders = ec.entity.find("co.hotwax.netsuite.order.EligibleOrders")
                if(orderId) findNetSuiteOrders.condition("orderId", orderId)
                if(fromOrderDate) findNetSuiteOrders.condition("orderDate", EntityCondition.ComparisonOperator.GREATER_THAN, fromOrderDate)
                if(thruOrderDate) findNetSuiteOrders.condition("orderDate", EntityCondition.ComparisonOperator.LESS_THAN, thruOrderDate)
                if(includeShipmentMethod) findNetSuiteOrders.condition("shipmentMethodTypeId",EntityCondition.ComparisonOperator.IN, includeShipmentMethod)
                if(excludeShipmentMethod) findNetSuiteOrders.condition("shipmentMethodTypeId",EntityCondition.ComparisonOperator.NOT_IN, excludeShipmentMethod)
                if(includeSalesChannel) findNetSuiteOrders.condition("salesChannelEnumId",EntityCondition.ComparisonOperator.IN, includeSalesChannel)
                if(excludeSalesChannel) findNetSuiteOrders.condition("salesChannelEnumId",EntityCondition.ComparisonOperator.NOT_IN, excludeSalesChannel)
                if(isMixCartOrder) findNetSuiteOrders.condition("isMixCartOrder", isMixCartOrder)

                findNetSuiteOrders.selectField("orderId,partyId,netsuiteCustomerId,orderDate,isMixCartOrder,shopifyOrderId")
                findNetSuiteOrders.useClone(true)
                findNetSuiteOrders.distinct(true)
                findNetSuiteOrders.limit(ordersCountPerFeed)

                //If no eligible orders, then don't generate the file
                long netsuiteOrdersCount = findNetSuiteOrders.count()
                if (netsuiteOrdersCount == 0) {
                    ec.message.addMessage("No eligible orders at ${nowTimestamp}, not generating the HotWax Feed file for Netsuite.")
                    return
                }
            </script>

            <set field="csvFilePathRef" value="runtime://datamanager/${filePathPattern}/CreateOrderItemsFeed_${ec.l10n.format(nowTimestamp, 'yyyy-MM-dd-HH-mm-ss')}.csv"/>
            <set field="invalidFilePathRef" value="runtime://datamanager/${filePathPattern}/required_fields_missing/CreateOrderItemsFeed_${ec.l10n.format(nowTimestamp, 'yyyy-MM-dd-HH-mm-ss')}.csv"/>
            <set field="csvFilePath" from="ec.resource.getLocationReference(csvFilePathRef).getUri().getPath()"/>
            <set field="invalidFilePath" from="ec.resource.getLocationReference(invalidFilePathRef).getUri().getPath()"/>

            <set field="sendPath" from="'/home/${sftpUsername}/' + filePathPattern + '/'"/>
            <set field="invalidSendPath" from="'/home/${sftpUsername}/' + filePathPattern + '/required_fields_missing/'"/>

            <set field="isFileEmpty" from="true"/>
            <set field="isReqFieldMissFileEmpty" from="true"/>
            <set field="csvHeaders" from="null"/>

            <script>
                // Using try-with-resources to automatically close the EntityListIterator 'ordersItr'
                try (ordersItr = findNetSuiteOrders.iterator(); CsvWriteHelper validFileCsvHelper = new CsvWriteHelper(csvFilePath, null, 0); CsvWriteHelper invalidFileCsvHelper = new CsvWriteHelper(invalidFilePath, null, 0)) {
            </script>

            <iterate list="ordersItr" entry="order">
                <entity-find-one entity-name="co.hotwax.netsuite.order.OrderDetails" value-field="orderDetails">
                    <field-map field-name="orderId" from="order.orderId"/>
                </entity-find-one>
                <set field="orderDetails" from="orderDetails.getMap()"/>

                <set field="orderDetails.shippingCost" from="orderDetails.shippingCost ?: BigDecimal.ZERO"/>
                <set field="orderDetails.date" from="ec.l10n.format(orderDetails.date, 'MM/dd/yyyy')"/>

                <set field="orderDetails.billingPhone" from="((orderDetails.billingCountryCode?:'') || (orderDetails.billingAreaCode?:'') || (orderDetails.billingContactNumber?:'')) ? ((orderDetails.billingCountryCode ?:'') + ' ' + (orderDetails.billingAreaCode ?:'') + ' ' + (orderDetails.billingContactNumber ?:'')) : ''" />
                <set field="orderDetails.phone" from="((orderDetails.shippingCountryCode?:'') || (orderDetails.shippingAreaCode?:'') || (orderDetails.shippingContactNumber?:'')) ? ((orderDetails.shippingCountryCode ?:'') + ' ' + (orderDetails.shippingAreaCode ?:'') + ' ' + (orderDetails.shippingContactNumber ?:'')) : ''" />

                <if condition="(!orderDetails.billingContactMechId &amp;&amp; orderDetails.shippingContactMechId)">
                    <set field="orderDetails" from="orderDetails + [billingAddress1:orderDetails.address1, billingAddress2:orderDetails.address2, billingCity:orderDetails.city, billingState:orderDetails.state, billingCountry:orderDetails.country, billingZip:orderDetails.zip, billingAddressee:orderDetails.addressee]"/>
                </if>

                <set field="shippingTaxCode" from="NetSuiteMappingWorker.getShippingTaxCode(ec, order.orderId)"/>
                <set field="orderDetails.giftCardPaymentTotal" from="NetSuiteMappingWorker.getGiftCardPaymentTotal(ec, order.orderId)"/>
                <set field="orderDetails" from="orderDetails + [orderId:orderDetails.orderName, HCOrderId:orderDetails.orderId, customer:orderDetails.netsuiteCustomerId, subsidiary:orderDetails.productStoreExternalId, salesChannel:orderDetails.orderSalesChannelDescription,
                    HCShopifySalesOrderId:order.shopifyOrderId, externalId: orderDetails.orderExternalId, shippingTaxCode:shippingTaxCode]"/>

                <set field="orderItems" from="[]"/>
                <entity-find entity-name="co.hotwax.netsuite.order.OrderItemsDetails" list="orderItemsList">
                    <econdition field-name="orderId" operator="equals" from="order.orderId"/>
                </entity-find>
                <set field="orderDetails.shippingMethod" from="NetSuiteMappingWorker.getShippingMethod(ec, order.isMixCartOrder, orderItemsList)"/>
                <set field="grandTotal" from="NetSuiteMappingWorker.getGrandTotal(orderDetails.adjustmentTotalAmount ?: 0, orderItemsList)" type="BigDecimal"/>
                <iterate list="orderItemsList" entry="orderItem">
                    <set field="orderItem" from="orderItem.getMap()"/>

                    <set field="taxCode" from="NetSuiteMappingWorker.getTaxCode(ec, orderItem)"/>
                    <set field="closed" from="'ITEM_CANCELLED'.equalsIgnoreCase(orderItem.itemStatus)"/>
                    <set field="priceLevel" from="NetSuiteMappingWorker.getIntegrationTypeMappingValue(ec, 'NETSUITE_PRICE_LEVEL', 'PRICE_LEVEL')" type="String"/>
                    <set field="department" from="NetSuiteMappingWorker.getFacilityIdentifications(ec, orderItem.orderFacilityId, 'ORDR_ORGN_DPT')" type="String"/>

                    <set field="orderItem" from="orderItem + [item:orderItem.netsuiteProductId, orderLineId:orderItem.orderItemSeqId, closed:closed, priceLevel:priceLevel, department:department, location:orderItem.orderFacilityExternalId, itemLocation:orderItem.facilityExternalId, taxCode:taxCode]"/>
                    <script>orderItems.add(orderItem)</script>

                    <set field="discountItems" from="NetSuiteMappingWorker.getDiscountItem(ec, order.orderId, orderItem)"/>
                    <if condition="discountItems"><script>orderItems.addAll(discountItems)</script></if>

                </iterate>
                <set field="orderDetails" from="orderDetails + [HCOrderTotal:grandTotal, orderItems:orderItems]"/>
                <set field="requiredFields" from="['date', 'country', 'customer']"/>
                <if condition="scriptPath">
                    <set field="scriptResult" from="ec.resource.script(scriptPath, null)"/>
                    <set field="orderDetails" from="scriptResult.orderData"/>
                    <set field="requiredFields" from="requiredFields + scriptResult.customRequiredFileds"/>
                </if>
                <set field="netsuiteOrderItemList" from="NetSuiteMappingWorker.prepareNetSuiteOrderItemList(orderDetails)"/>
                <script>
                    // Check for required fields and separate valid/invalid orders
                    netsuiteOrderItemList.each { record ->
                        def missingFields = requiredFields.findAll { !record[it] || record[it].toString().trim() == '' }

                        if (missingFields) {
                            record.put("Missing Required Fields", missingFields.join(', '))
                            invalidFileCsvHelper.writeToFile(record)
                            isReqFieldMissFileEmpty = false
                        } else {
                            validFileCsvHelper.writeToFile(record)
                            isFileEmpty = false
                        }
                    }
                    orderDetails = null
                </script>
            </iterate>
            <script>
                }
            </script>
            <if condition="!isFileEmpty">
                <service-call name="co.hotwax.helper.HelperServices.put#FileOnSftp"
                    in-map="[systemMessageRemoteId:systemMessageRemoteId, receivePath:csvFilePath, sendPath:sendPath]"/>
            </if>
            <if condition="!isReqFieldMissFileEmpty">
                <service-call name="co.hotwax.helper.HelperServices.put#FileOnSftp"
                    in-map="[systemMessageRemoteId:systemMessageRemoteId, receivePath:invalidFilePath, sendPath:invalidSendPath]"/>
            </if>
            <return message="Generated Order Items Feed file  ${csvFilePath} and missing file response in ${invalidFilePath}"/>
        </actions>
    </service>
    <service verb="generate" noun="FulfilledOrderItemsFeed" authenticate="anonymous-all" transaction-timeout="7200">
        <in-parameters>
            <parameter name="systemMessageRemoteId" required="true"/>
            <parameter name="fulfilledOrdersCountPerFeed" type="Integer" default-value="2500"/>
            <parameter name="orderId"/>
            <parameter name="orderItemSeqId"/>
        </in-parameters>
        <actions>
            <set field="nowTimestamp" from="ec.user.nowTimestamp"/>
            <set field="baseFile" value="runtime://datamanager/netsuite/FulfillmentFeed/fulfilledOrderItemsFeed_${ec.l10n.format(nowTimestamp, 'yyyy-MM-dd-HH-mm-ss')}.csv"/>
            <set field="baseFilePath" from="ec.resource.getLocationReference(baseFile).getUri().getPath()"/>
            <set field="sendPath" from="'/home/${sftpUsername}/netsuite/salesorder/update/'"/>
            <set field="headers" from="['lineId', 'internalId', 'item', 'quantity', 'location', 'tags']"/>
            <script>
                fulfilledOrderItemsFind = ec.entity.find("co.hotwax.netsuite.warehouse.FulfilledOrderItems")
                if(orderId) fulfilledOrderItemsFind.condition("orderId", orderId)
                if(orderItemSeqId) fulfilledOrderItemsFind.condition("orderItemSeqId", orderItemSeqId)

                //If no eligible orders, then don't generate the file
                long netsuiteOrdersCount = fulfilledOrderItemsFind.count()
                if (netsuiteOrdersCount == 0) {
                    ec.message.addMessage("No eligible orders for Fulfilled Order and Items Feed at ${nowTimestamp}, not generating the HotWax Feed file.")
                    return
                }

                import co.hotwax.util.CsvWriteHelper
                try (fulfilledOrderItemsItr = fulfilledOrderItemsFind.iterator();
                    CsvWriteHelper CsvWriteHelper = new CsvWriteHelper(baseFilePath, headers, fulfilledOrdersCountPerFeed)) {
            </script>
            <iterate list="fulfilledOrderItemsItr" entry="fulfilledOrderItem">
                <set field="fulfilledOrderItemMap" from="[
                    lineId:fulfilledOrderItem.netsuiteItemLineId,
                    internalId:fulfilledOrderItem.netsuiteOrderId,
                    item:'',
                    quantity:fulfilledOrderItem.quantity,
                    location:fulfilledOrderItem.facilityExternalId,
                    tags:'hotwax-fulfilled'
                ]"/>
                <script>CsvWriteHelper.writeToFile(fulfilledOrderItemMap)</script>
                <service-call name="create#co.hotwax.integration.order.OrderFulfillmentHistory" in-map="[orderId:fulfilledOrderItem.orderId,
                    orderItemSeqId:fulfilledOrderItem.orderItemSeqId, comments:'Order Item sent as part of OMS to NetSuite Fulfilled Items Feed', createdDate:nowTimestamp, externalFulfillmentId:'_NA_']"/>
            </iterate>
            <entity-find-one entity-name="moqui.service.message.SystemMessageRemote" value-field="systemMessageRemote"/>
            <set field="generatedFilePaths" from="CsvWriteHelper.getGeneratedFilePaths()"/>
            <script>}</script>
            <iterate list="generatedFilePaths" entry="generatedFilePath">
                <service-call name="co.hotwax.helper.HelperServices.put#FileOnSftp" in-map="[systemMessageRemoteId:systemMessageRemote.systemMessageRemoteId, receivePath:generatedFilePath, sendPath:sendPath]"/>
            </iterate>
            <return message=" Created the Fulfilled Order Items Feed file with orders count ${netsuiteOrdersCount} at time ${nowTimestamp} saved response in messages ${generatedFilePaths}"/>
        </actions>
    </service>
    <service verb="get" noun="BrokeredOrders" authenticate="anonymous-all" transaction-timeout="7200">
        <in-parameters>
            <parameter name="brokeredOrdersCountPerFeed" type="Integer"/>
            <parameter name="orderId"/>
            <parameter name="orderItemSeqId"/>
            <parameter name="systemMessageTypeId" required="true"/>
            <parameter name="systemMessageRemoteId" required="true"/>
            <parameter name="parentFacilityTypeIds" type="List"/>
            <parameter name="productStoreIds" type="List"/>
            <parameter name="facilityGroupIds" type="List"/>
        </in-parameters>
        <actions>
            <set field="isFirstFeed" from="true"/>
            <while condition="isFirstFeed || (brokeredOrdersCount &amp;&amp; (brokeredOrdersCount == brokeredOrdersCountPerFeed || brokeredOrdersCount != 0))">
                <!-- Added transaction=force-new as for each call to this service should be done in a new transaction
                     so that if there are multiple files being generated and an error occurs for an order in one file then
                     the transaction should be rolled back only for that file and not all the files. -->

                <!-- NOTE: Without a new transaction, if an error occurs for an order, then the whole transaction is rolled back
                     that means, no history will be created for any orders in previous generated files but the previous generated files will be sent to SFTP.
                     This can result into duplicate orders as the previous files were sent to SFTP and since history was not created
                     so these orders will be eligible and will come again in the feed. -->

                <service-call name="co.hotwax.netsuite.OrderServices.generate#BrokeredOrderItemsFeed"
                              in-map="context" out-map="brokeredFeedOut" transaction="force-new"/>
                <set field="brokeredOrdersCount" from="brokeredFeedOut?.brokeredFeedOrdersCount"/>

                <!-- Negated the value for while condition for next runs -->
                <set field="isFirstFeed" from="false"/>
            </while>
        </actions>
    </service>
    <service verb="generate" noun="BrokeredOrderItemsFeed" authenticate="anonymous-all" transaction-timeout="7200">
        <description>
            Service to generate Brokered Order Items Feed for the new order sync flow with added check for NetsuiteItemLineId and takes count per feed which can take in a limit parameter
            to include a specific number of records in the Feed File.
            If no limit is set, default-value of limit parameter will be considered to fetch the
            eligible orders for the feed.
        </description>
        <in-parameters>
            <parameter name="brokeredOrdersCountPerFeed" type="Integer"/>
            <parameter name="orderId"/>
            <parameter name="orderItemSeqId"/>
            <parameter name="systemMessageTypeId" required="true"/>
            <parameter name="systemMessageRemoteId" required="true"/>
            <parameter name="parentFacilityTypeIds" type="List"/>
            <parameter name="facilityGroupIds" type="List"/>
            <parameter name="productStoreIds" type="List"/>
        </in-parameters>
        <out-parameters>
            <parameter name="brokeredFeedOrdersCount" type="Integer"/>
        </out-parameters>
        <actions>

            <set field="brokeredFeedOrdersCount" from="0"/>
            <set field="nowDate" from="ec.user.nowTimestamp"/>

            <log message="Generating Brokered Orders and Items Feed Feed file of HotWax for parentFacilityTypeId ${parentFacilityTypeIds}, Order ${orderId} at time ${nowDate}"/>

            <entity-find-one entity-name="moqui.service.message.SystemMessageType" value-field="systemMessageType"/>
            <if condition="systemMessageType == null"><return error="true" message="Could not find SystemMessageType with ID ${systemMessageTypeId}"/></if>

            <set field="productStoreId" from="(!productStoreIds || productStoreIds.size() > 1) ? System.getProperty('hotwax_feed_default_prefix') : productStoreIds[0]"/>

            <set field="csvFilePathRef" from="ec.resource.expand(systemMessageType.receivePath, null,
                [contentRoot: ec.user.getPreference('mantle.content.root') ?: 'dbresource://datamanager', date:ec.l10n.format(nowDate, 'yyyy-MM-dd'), dateTime:ec.l10n.format(nowDate, 'yyyy-MM-dd-HH-mm-ss-SSS'),
                productStoreId:productStoreId], false)"/>

            <set field="csvFilePath" from="ec.resource.getLocationReference(csvFilePathRef).getUri().getPath()"/>

            <script>
                import org.apache.commons.csv.CSVFormat
                import org.apache.commons.csv.CSVPrinter
                import java.nio.file.Files
                import java.nio.file.Paths
                import java.nio.charset.StandardCharsets
                import org.moqui.entity.EntityCondition

                File csvFile = new File(csvFilePath)
                if(!csvFile.parentFile.exists()) csvFile.parentFile.mkdirs()
                def isFileEmpty = true
                def csvHeaders = null

                brokeredOrders_find = ec.entity.find("co.hotwax.netsuite.warehouse.BrokeredOrderItemsFeed").distinct(true)
                brokeredOrders_find.condition("itemStatusId", "ITEM_APPROVED")
                if(orderId) brokeredOrders_find.condition("orderId", orderId)
                if(orderItemSeqId) brokeredOrders_find.condition("orderItemSeqId", orderItemSeqId)
                if(facilityGroupIds) brokeredOrders_find.condition("facilityGroupId", EntityCondition.ComparisonOperator.IN, facilityGroupIds)
                if(productStoreIds) brokeredOrders_find.condition("productStoreId", EntityCondition.ComparisonOperator.IN, productStoreIds)
                brokeredOrders_find.limit(brokeredOrdersCountPerFeed)
                .selectField("orderId,entryDate,netsuiteItemLineId,orderItemSeqId,productStoreId,productId,shipmentMethodTypeId,facilityExternalId,postalContactMechId,itemStatusId,externalFulfillmentOrderItemId,shipGroupSeqId,orderItemQuantity")
                .orderBy("entryDate")

                //If no eligible brokered orders, then don't generate the file
                long brokeredOrdersCount = brokeredOrders_find.count()
                if (brokeredOrdersCount == 0) {
                    ec.message.addMessage("No eligible orders for Brokered Order and Items Feed at ${nowDate}, not generating the HotWax Feed file.")
                    return
                }

                try (brokeredOrdersItr = brokeredOrders_find.iterator()) {
                    try (def writer = Files.newBufferedWriter(Paths.get(csvFilePath), StandardCharsets.UTF_8);
                    def csvPrinter = new CSVPrinter(writer, CSVFormat.DEFAULT)){
            </script>

            <iterate list="brokeredOrdersItr" entry="brokerOrderItem">
                <set field="jsonSlurper" from="new groovy.json.JsonSlurper()"/>

                <entity-find-one entity-name="moqui.service.message.SystemMessageTypeParameter" value-field="ftlFileResource">
                    <field-map field-name="systemMessageTypeId" from="systemMessageTypeId"/>
                    <field-map field-name="parameterName" value="resourcePath"/>
                </entity-find-one>
                <!-- Check if the custom ftl file resource is available. -->
                <if condition="ftlFileResource &amp;&amp; ftlFileResource.parameterValue">
                    <set field="templateLocation" from="ftlFileResource.parameterValue"/>
                    <else><set field="templateLocation" value="component://mantle-netsuite-connector/template/GetBrokeredOrderItemsDetail.ftl"/></else>
                </if>
                <set field="templateWriter" from="new StringWriter()"/>
                <script>ec.resourceFacade.template(templateLocation, templateWriter)</script>
                <set field="brokerOrderItemMap" from="jsonSlurper.parseText(templateWriter.toString())"/>

                <if condition="brokerOrderItem.externalFulfillmentOrderItemId"><then>
                    <service-call name="update#co.hotwax.integration.order.ExternalFulfillmentOrderItem"
                        in-map="[externalFulfillmentOrderItemId:brokerOrderItem.externalFulfillmentOrderItemId,
                        fulfillmentStatus:'Sent']"/>
                </then><else>
                    <service-call name="create#co.hotwax.integration.order.ExternalFulfillmentOrderItem" in-map="[orderId:brokerOrderItem.orderId,
                        orderItemSeqId:brokerOrderItem.orderItemSeqId, shipGroupSeqId:brokerOrderItem.shipGroupSeqId,
                        fulfillmentStatus:'Sent', createdDate:nowDate, quantity:brokerOrderItem.orderItemQuantity]"/>
                </else></if>

                <if condition="!csvHeaders">
                    <set field="csvHeaders" from="brokerOrderItemMap.keySet().toList()"/>
                    <script>csvPrinter.printRecord(csvHeaders)</script>
                </if>
                <set field="brokerOrderItemRecord" from="csvHeaders.collect { key -> brokerOrderItemMap[key] != null ? brokerOrderItemMap[key] : '' }"/>
                <script>
                    csvPrinter.printRecord(brokerOrderItemRecord)
                    brokeredFeedOrdersCount++
                </script>
            </iterate>
            <script>
                }
                    } catch (Exception e) {
                        ec.message.addError("Error preparing brokered order feed file ${e}")
                }
            </script>
            <if condition="brokeredFeedOrdersCount != 0">
                <service-call name="org.moqui.impl.SystemMessageServices.queue#SystemMessage"
                    in-map="[messageText:csvFilePathRef, systemMessageTypeId:systemMessageTypeId,
                    systemMessageRemoteId:systemMessageRemoteId, productStoreId:productStoreId]" out-map="brokeredSystemMessageOut"/>
            </if>

            <return message="Created the Brokered Order Items Feed file with orders count
                ${brokeredFeedOrdersCount} at time ${ec.user.nowTimestamp} with type ${systemMessageTypeId}
                and remote ${systemMessageRemoteId} saved response in messages
                ${brokeredSystemMessageOut?.systemMessageId}"/>
        </actions>
    </service>
</services>