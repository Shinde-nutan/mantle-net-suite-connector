<?xml version="1.0" encoding="UTF-8"?>
<services xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="http://moqui.org/xsd/service-definition-3.xsd">

    <service verb="generate" noun="CustomerDepositFeed" authenticate="anonymous-all" transaction-timeout="7200">
        <in-parameters>
            <parameter name="systemMessageTypeId" >
                <description>The System Message Type ID for generating the Orders Feed for Netsuite.</description>
            </parameter>
            <parameter name="systemMessageRemoteId" >
                <description>The System Message Remote Id for generating the Orders Feed for Netsuite.</description>
            </parameter>
            <parameter name="fromDate">
                <description>Parameter to fetch the customer deposit after specific date (when the netsuite order id is sync with hotwax)</description>
            </parameter>
            <parameter name="excludeShipmentMethod" type="List">
                <description>Parameter to exclude the Orders from the specific shipment method or a list of shipping method
                    like: POS_COMPLETED
                </description>
            </parameter>
            <parameter name="jobName">
                <description>The name of the scheduled job to fetch the last run time for preparing customer deposit feed.</description>
            </parameter>
            <parameter name="skipLastRunTimeUpdate" type="Boolean" default="false">
                <description>skip the LastRunTime update,mainly used while debugging</description>
            </parameter>
        </in-parameters>
        <actions>
<!--            <set field="nowDate" from="ec.user.nowTimestamp"/>-->
<!--            <log message="Generating customer deposit feed at time ${nowDate}"/>-->

<!--            &lt;!&ndash; We can use last run time to fetch the records updated after the last service job run &ndash;&gt;-->
<!--            <entity-find-one entity-name="moqui.service.job.ServiceJobParameter" value-field="lastRunParam">-->
<!--                <field-map field-name="jobName"/>-->
<!--                <field-map field-name="parameterName" value="lastRunTime"/>-->
<!--            </entity-find-one>-->

<!--            &lt;!&ndash; Set sinceDate using the lastRunTime, if it is set, fetch updates from-->
<!--                   that time, else it will be null &ndash;&gt;-->
<!--            <if condition="!fromDate">-->
<!--                <set field="fromDate" from="lastRunParam?.parameterValue"/>-->
<!--            </if>-->

<!--            <script>-->
<!--                import com.fasterxml.jackson.core.JsonGenerator-->
<!--                import com.fasterxml.jackson.core.JsonFactory-->
<!--                import com.fasterxml.jackson.databind.ObjectMapper-->
<!--                import java.nio.charset.StandardCharsets-->
<!--                import org.moqui.entity.EntityCondition-->

<!--                customerDeposit_find = ec.entity.find("co.hotwax.financial.CustomerDepositSyncView")-->
<!--                if(fromDate) customerDeposit_find.condition("fromDate", EntityCondition.ComparisonOperator.GREATER_THAN, fromDate)-->
<!--                if(excludeShipmentMethod) customerDeposit_find.condition("shipmentMethodTypeId",EntityCondition.ComparisonOperator.NOT_IN, excludeShipmentMethod)-->

<!--                // Using try-with-resources to automatically close the EntityListIterator 'depositItr'-->
<!--                try (depositItr = customerDeposit_find.iterator()) {-->
<!--            </script>-->

<!--            <if condition="!depositItr.hasNext()">-->
<!--                <return message="No eligible customer deposit at ${nowDate}, not generating the HotWax Feed file."/>-->
<!--            </if>-->

<!--            &lt;!&ndash; Fetch the receivePath from SystemMessageType to prepare the path for creating the file in the receiving system. Ex: Moqui's datamanager directory in runtime for creating feeds.&ndash;&gt;-->
<!--            <entity-find-one entity-name="moqui.service.message.SystemMessageType" value-field="systemMessageType"/>-->
<!--            <if condition="systemMessageType == null"><return error="true" message="Could not find SystemMessageType with ID ${systemMessageTypeId}"/></if>-->

<!--            &lt;!&ndash; Prepare JSON File Path &ndash;&gt;-->
<!--            &lt;!&ndash; Using receivePath from SystemMessageType to prepare the jsonFilePathRef.&ndash;&gt;-->
<!--            <set field="jsonFilePathRef" from="ec.resource.expand(systemMessageType.receivePath, null,-->
<!--            [contentRoot: ec.user.getPreference('mantle.content.root') ?: 'dbresource://datamanager', date:ec.l10n.format(nowDate, 'yyyy-MM-dd'), dateTime:ec.l10n.format(nowDate, 'yyyy-MM-dd-HH-mm-ss-SSS'),-->
<!--             productStoreId:productStoreId], false)"/>-->
<!--            <set field="jsonFilePath" from="ec.resource.getLocationReference(jsonFilePathRef).getUri().getPath()"/>-->

<!--            &lt;!&ndash; Prepare the customer deposit Feed file  &ndash;&gt;-->
<!--            <script>-->
<!--                try {-->
<!--                //json file-->
<!--                    File cusFeedFile = new File(jsonFilePath)-->
<!--                    if (!cusFeedFile.parentFile.exists()) cusFeedFile.parentFile.mkdirs()-->
<!--                    JsonFactory jfactory = new JsonFactory()-->

<!--                    /* Declaring the PrintWriter and JsonGenerator resources in the the try statement,-->
<!--                    so that they are automatically closed regardless of whether the try statement completes normally or abruptly. */-->
<!--                    try (PrintWriter pw = new PrintWriter(StandardCharsets.UTF_8, cusFeedFile);-->
<!--                    JsonGenerator jGenerator = jfactory.createGenerator(pw)) {-->
<!--                        jGenerator.writeStartArray()-->
<!--            </script>-->
<!--            <iterate list="depositItr" entry="cusDeposit">-->

<!--                <entity-find entity-name="co.hotwax.integration.IntegrationTypeMapping" list="paymentMapping">-->
<!--                    <econdition field-name="integrationTypeId" value="NETSUITE_PMT_MTHD"/>-->
<!--                </entity-find>-->

<!--                <script>-->
<!--                        def customerDeposit = new HashMap(cusDeposit);-->
<!--                        String paymentMethodTypeId = cusDeposit.paymentMethodTypeId;-->
<!--                        def specificMapping = paymentMapping.find { it.mappingKey == paymentMethodTypeId };-->
<!--                        def defaultMapping = specificMapping ?: paymentMapping.find { it.mappingKey == 'DEFAULT' };-->
<!--                        customerDeposit['paymentMethod'] = defaultMapping?.mappingValue;-->
<!--                        customerDeposit.remove('paymentMethodTypeId');-->
<!--                        customerDeposit.remove('fromDate');-->
<!--                        customerDeposit.remove('shipmentMethodTypeId');-->
<!--                        customerDeposit.remove('orderPaymentPreferenceId');-->
<!--                        customerDeposit.remove("statusCount")-->
<!--                        customerDeposit.remove("status")-->

<!--                        new ObjectMapper()-->
<!--                        .setDateFormat(new java.text.SimpleDateFormat(System.getProperty('default_date_time_format')))-->
<!--                        .writerWithDefaultPrettyPrinter().writeValue(jGenerator, customerDeposit)-->
<!--                </script>-->
<!--            </iterate>-->
<!--            <script>-->
<!--                        jGenerator.writeEndArray()-->
<!--                        }-->
<!--                    } catch (IOException e) {-->
<!--                        logger.error("Error preparing customer deposit file", e)-->
<!--                    }-->
<!--                }-->
<!--            </script>-->

<!--            &lt;!&ndash; Call queue#SystemMessage that will save the json file path in messageText and send the file to sftp-->
<!--             using the send service configured in SystemMessageType &ndash;&gt;-->
<!--            <service-call name="org.moqui.impl.SystemMessageServices.queue#SystemMessage"-->
<!--                in-map="[systemMessageTypeId:systemMessageTypeId,-->
<!--                systemMessageRemoteId:systemMessageRemoteId, messageText:jsonFilePathRef]"-->
<!--                out-map="custFeedSystemMessageOut"/>-->

<!--            &lt;!&ndash; Based on the input of skipLastRunTimeUpdate, we can update the last Run time-->
<!--                   This will help in controlling the update of last run time if the job is run manually &ndash;&gt;-->
<!--            <if condition="!skipLastRunTimeUpdate">-->
<!--                &lt;!&ndash; Set the current timestamp as the last run time for next run &ndash;&gt;-->
<!--                <service-call name="update#moqui.service.job.ServiceJobParameter"-->
<!--                    in-map="[jobName:lastRunParam.jobName, parameterName:lastRunParam.parameterName,-->
<!--                    parameterValue:nowDate]"/>-->
<!--            </if>-->
<!--            <return message="Created the HotWax customer deposit Feed file at time ${ec.user.nowTimestamp} with type ${systemMessageTypeId} and-->
<!--                remote ${systemMessageRemoteId} saved response in messages ${custFeedSystemMessageOut.systemMessageId}"/>-->
<!--
        <script>
            import org.moqui.entity.EntityDynamicView
            import org.moqui.entity.EntityFind
            import org.moqui.entity.EntityCondition
            import org.moqui.entity.EntityConditionFactory;
            import org.moqui.impl.entity.EntityDefinition.MasterDetail
            import org.moqui.impl.entity.EntityDefinition.MasterDefinition

            def entityFind = ec.entity.find("org.apache.ofbiz.order.order.OrderHeader");

            // Create dynamic view entity
            EntityDynamicView dynamicView = entityFind.makeEntityDynamicView()

            // Add member entities
            dynamicView.addMemberEntity("OH", "org.apache.ofbiz.order.order.OrderHeader", null, null, null)

            dynamicView.addMemberEntity("OID", "co.hotwax.order.OrderIdentification", "OH", false, ["orderId": "orderId"], [
            ["field-name": "orderIdentificationTypeId", "value": "NETSUITE_ORDER_ID"], ["date-filter": ""]
            ],null)

            dynamicView.addMemberEntity("OPP", "org.apache.ofbiz.order.order.OrderPaymentPreference", "OH", null, ["orderId": "orderId"])

            dynamicView.addMemberEntity("OISG", "org.apache.ofbiz.order.order.OrderItemShipGroup", "OH", null, ["orderId": "orderId"])

            dynamicView.addMemberEntity("OS", "org.apache.ofbiz.order.order.OrderStatus", "OH", true, ["orderId": "orderId"], [
            ["field-name": "orderItemSeqId", "operator": "is-null",value: ""],
            ["field-name": "orderPaymentPreferenceId", "operator": "is-null", value: ""]
            ],null)

            // Add Aliases
            dynamicView.addAlias("OH", "shopifyOrderNo", "externalId",  null)
            dynamicView.addAlias( "OPP","totalAmount", "maxAmount", null)
            dynamicView.addAlias( "OPP","externalId", "manualRefNum", null)
            dynamicView.addAlias("OID", "fromDate", "fromDate",  null)
            dynamicView.addAlias("OID", "orderId", "idValue",null)
            dynamicView.addAlias("OPP", "paymentMethodTypeId", "paymentMethodTypeId",  null)
            dynamicView.addAlias("OPP", "orderPaymentPreferenceId", "orderPaymentPreferenceId",  null)
            dynamicView.addAlias( "OISG","shipmentMethodTypeId", "shipmentMethodTypeId", null, null, "true")
            dynamicView.addAlias( "OS","statusCount", "statusId", "count")
            dynamicView.addAlias( "OS", "status", "statusId", "max")

            dynamicView.addWhereConditions([
                ["field-name": "orderTypeId", "value": "SALES_ORDER", "entity-alias": "OH"],
                ["field-name": "statusId", "operator": "not-equals", "value": "PAYMENT_REFUNDED", "entity-alias": "OPP"],
                ["field-name": "paymentMethodTypeId", "operator": "not-equals", "value": "EXT_SHOP_GFT_CARD", "entity-alias": "OPP"]
            ])
           dynamicView.addHavingConditions([
                ["combine": "or"],
                ["conditions": [
                    ["field-name": "statusCount", "operator": "equals", "value": "1"],
                    ["field-name": "status", "operator": "not-equals", "value": "ORDER_CANCELLED"]
                ], "combine": "and"],
                ["field-name": "statusCount", "operator": "greater", "value": "1"]
            ])

            logger.info("==dynamicView.getViewEntityNode()=====" + dynamicView.getViewEntityNode())

            def eligibleOrders = entityFind.list()
        </script>
-->
            <script>
            import org.moqui.entity.EntityDynamicView
            import org.moqui.entity.EntityFind
            import org.moqui.entity.EntityCondition
            import org.moqui.entity.EntityConditionFactory;
            import org.moqui.impl.entity.EntityDefinition.MasterDetail
            import org.moqui.impl.entity.EntityDefinition.MasterDefinition

            def entityFind = ec.entity.find("org.apache.ofbiz.order.order.OrderHeader");

            // Create dynamic view entity
            EntityDynamicView dynamicView = entityFind.makeEntityDynamicView()

            // Add member entities
            dynamicView.addMemberEntity("OH", "org.apache.ofbiz.order.order.OrderHeader", null, null, null)

            dynamicView.addMemberEntity("OID", "co.hotwax.order.OrderIdentification", "OH", false, ["orderId": "orderId"], [
            ["field-name": "orderIdentificationTypeId", "value": "NETSUITE_ORDER_ID"], ["date-filter": ""]
            ],null)

            dynamicView.addMemberEntity("OPP", "org.apache.ofbiz.order.order.OrderPaymentPreference", "OH", null, ["orderId": "orderId"])

            dynamicView.addMemberEntity("OISG", "org.apache.ofbiz.order.order.OrderItemShipGroup", "OH", null, ["orderId": "orderId"],[["field-name": "shipmentMethodTypeId", "operator":"not-equals", "value": "POS_COMPLETED"]],null)

            dynamicView.addMemberEntity("SHOPOID", "co.hotwax.order.OrderIdentification", "OH", false, ["orderId": "orderId"], [
            ["field-name": "orderIdentificationTypeId", "value": "SHOPIFY_ORD_NO"], ["date-filter": ""]
            ],null)

            // Add Aliases
            dynamicView.addAlias("OH", "shopifyOrderNo", "externalId",  null)
            dynamicView.addAlias("OPP","totalAmount", "maxAmount", null)
            dynamicView.addAlias( "OPP","externalId", "manualRefNum", null)
            dynamicView.addAlias("OID", "fromDate", "fromDate",  null)
            dynamicView.addAlias("OID", "netsuiteOrderId", "idValue",null)
            dynamicView.addAlias("SHOPOID", "shopifyOrderId", "idValue",null)
            dynamicView.addAlias("OPP", "paymentMethodTypeId", "paymentMethodTypeId",  null)
            dynamicView.addAlias("OPP", "orderPaymentPreferenceId", "orderPaymentPreferenceId",  "max")
            dynamicView.addAlias("OISG", "shipmentMethodTypeId", "shipmentMethodTypeId",  null,null, "true")


            dynamicView.addWhereConditions([
                ["field-name": "orderTypeId", "value": "SALES_ORDER", "entity-alias": "OH"],
                ["field-name": "statusId", "operator": "not-equals", "value": "PAYMENT_REFUNDED", "entity-alias": "OPP"],
                ["field-name": "paymentMethodTypeId", "operator": "not-equals", "value": "EXT_SHOP_GFT_CARD", "entity-alias": "OPP"]
            ])

            logger.info("==dynamicView.getViewEntityNode()=====" + dynamicView.getViewEntityNode())

            def eligibleOrders = entityFind.list()

            </script>
        </actions>
    </service>
     <service verb="generate" noun="CustomerSyncFeed" authenticate="anonymous-all">
        <in-parameters>
            <parameter name="partyId">
                <description>Parameter to fetch party details for a specific customer.</description>
            </parameter>
            <parameter name="systemMessageTypeId">
                <description>The System Message Type ID for generating the Customer Feed for Netsuite.</description>
            </parameter>
            <parameter name="systemMessageRemoteId">
                <description>The System Message Remote Id for generating the Customer Feed for Netsuite.</description>
            </parameter>
        </in-parameters>
        <actions>
<!--            <set field="nowDate" from="ec.user.nowTimestamp"/>-->
<!--            <log message="Generating Customer Feed file for party ${partyId} at time ${nowDate}"/>-->

<!--            &lt;!&ndash; Fetch the receivePath from SystemMessageType to prepare the path for creating the file in the receiving system. Ex: Moqui's datamanager directory in runtime for creating feeds.&ndash;&gt;-->
<!--            <entity-find-one entity-name="moqui.service.message.SystemMessageType" value-field="systemMessageType"/>-->
<!--            <if condition="systemMessageType == null">-->
<!--                <return error="true" message="Could not find SystemMessageType with ID ${systemMessageTypeId}"/>-->
<!--            </if>-->
<!--            &lt;!&ndash; Prepare csv File Path &ndash;&gt;-->
<!--            <set field="csvFilePathRef" from="ec.resource.expand(systemMessageType.receivePath, null,-->
<!--                [contentRoot: ec.user.getPreference('mantle.content.root') ?: 'dbresource://datamanager', date:ec.l10n.format(nowDate, 'yyyy-MM-dd'), dateTime:ec.l10n.format(nowDate, 'yyyy-MM-dd-HH-mm-ss-SSS'),-->
<!--                 productStoreId:productStoreId], false)"/>-->
<!--            <set field="csvFilePath" from="ec.resource.getLocationReference(csvFilePathRef).getUri().getPath()"/>-->

<!--            &lt;!&ndash; Fetch the Groovy script resource path &ndash;&gt;-->
<!--            <entity-find-one entity-name="moqui.service.message.SystemMessageTypeParameter" value-field="groovyFileResource">-->
<!--                <field-map field-name="systemMessageTypeId" from="systemMessageTypeId"/>-->
<!--                <field-map field-name="parameterName" value="resourcePath"/>-->
<!--            </entity-find-one>-->
<!--            <set field="scriptPath" from="groovyFileResource.parameterValue"/>-->

<!--            <script>-->
<!--                import org.apache.commons.csv.CSVFormat-->
<!--                import org.apache.commons.csv.CSVPrinter-->
<!--                import java.nio.file.Files-->
<!--                import java.nio.file.Paths-->
<!--                import java.nio.charset.StandardCharsets-->

<!--                File csvFile = new File(csvFilePath)-->
<!--                if (!csvFile.parentFile.exists()) {-->
<!--                    csvFile.parentFile.mkdirs()-->
<!--                }-->

<!--                 // Fetch customers and check if there are eligible customers-->
<!--                def netsuiteCustomer_find = ec.entity.find("co.netsuite.customer.CustomerView")-->
<!--                if (partyId) {-->
<!--                    netsuiteCustomer_find.condition("externalId", partyId)-->
<!--                }-->
<!--                try (netsuiteCustomer_itr = netsuiteCustomer_find.iterator()) {-->
<!--            </script>-->
<!--        <if condition="!netsuiteCustomer_itr.hasNext()">-->
<!--         <return message="No eligible customer at ${nowDate}, not generating the HotWax Feed file."/>-->
<!--        </if>-->
<!--        <script>-->
<!--            try {-->
<!--                // Try-with-resources for BufferedWriter-->
<!--                Files.newBufferedWriter(Paths.get(csvFilePath), StandardCharsets.UTF_8).withCloseable { writer ->-->
<!--                    // Try-with-resources for CSVPrinter-->
<!--                    new CSVPrinter(writer, CSVFormat.DEFAULT.withHeader()).withCloseable { csvPrinter ->-->


<!--                    def csvHeaders = null-->
<!--                    netsuiteCustomer_itr.each { customer ->-->
<!--                        def customerData = [:]-->
<!--                        customerData.putAll(customer)-->

<!--                        customerData.individual = "T"-->
<!--                        customerData.status = "CUSTOMER-Closed Won"-->
<!--                        customerData.taxable = "TRUE"-->
<!--                        customerData.defaultOrderPriority = "5"-->
<!--                        customerData.externalId = customerData.HCShopifyCustomerId-->

<!--                        customerData.firstName = (customer.firstName?.length() > 13 ? customer.firstName.substring(0, 13) : customer.firstName) ?: "X"-->
<!--                        customerData.lastName = (customer.lastName?.length() > 13 ? customer.lastName.substring(0, 13) : customer.lastName) ?: "X"-->

<!--                        customerData.phone = [customer.countryCode, customer.areaCode, customer.contactNumber].findAll { it }?.join(' ') ?: null-->

<!--                        // Remove unnecessary fields-->
<!--                        customerData.remove("countryCode")-->
<!--                        customerData.remove("areaCode")-->
<!--                        customerData.remove("contactNumber")-->

<!--                        // Execute Groovy script if available-->
<!--                        if (groovyFileResource) {-->
<!--                            Object scriptResult = ec.resource.script(scriptPath, null, [customerData: customerData])-->
<!--                            if (scriptResult instanceof Map) {-->
<!--                                customerData.putAll(scriptResult)-->
<!--                            }-->
<!--                        }-->

<!--                       // Set headers only once-->
<!--                        if (csvHeaders == null) {-->
<!--                            csvHeaders = customerData.keySet() as List-->
<!--                            csvPrinter.printRecord(csvHeaders)-->
<!--                        }-->

<!--                        // Write each row-->
<!--                        csvPrinter.printRecord(csvHeaders.collect { key -> customerData[key] ?: "" })-->
<!--                    }-->
<!--                    }-->
<!--                }-->
<!--                } catch (Exception e) {-->
<!--                    ec.message.addError("Error preparing customer feed file ${e}")-->
<!--                }-->
<!--            }-->
<!--        </script>-->
<!--            &lt;!&ndash; Save the Json Feed File path in System Message messageText &ndash;&gt;-->
<!--            <service-call name="org.moqui.impl.SystemMessageServices.queue#SystemMessage"-->
<!--                in-map="[systemMessageTypeId:systemMessageTypeId, systemMessageRemoteId:systemMessageRemoteId,-->
<!--                messageText:csvFilePath]" out-map="FeedSysMsgOut"/>-->

<!--            <return message="Generating customer sync feed file with type ${systemMessageTypeId} and-->
<!--                remote ${systemMessageRemoteId} saved response in messages ${FeedSysMsgOut.systemMessageId}"/>-->

            <script>
                import org.moqui.entity.EntityDynamicView
                import org.moqui.entity.EntityFind
                import org.moqui.entity.EntityCondition
                import org.moqui.entity.EntityConditionFactory;


                def entityFind = ec.entity.find("org.apache.ofbiz.party.party.Person");


                EntityDynamicView dynamicView = entityFind.makeEntityDynamicView()

                dynamicView.addMemberEntity("PER", "org.apache.ofbiz.party.party.Person", null,null,null)

                dynamicView.addMemberEntity("PROLE", "org.apache.ofbiz.party.party.PartyRole", "PER", false, ["partyId": "partyId"])

                dynamicView.addMemberEntity("PTY", "org.apache.ofbiz.party.party.Party", "PER", false, ["partyId": "partyId"])

                dynamicView.addMemberEntity("NSPID", "org.apache.ofbiz.party.party.PartyIdentification", "PTY", true, ["partyId": "partyId"],
                [["field-name": "partyIdentificationTypeId", "value": "NETSUITE_CUSTOMER_ID"]],null)

                dynamicView.addMemberEntity("PID", "org.apache.ofbiz.party.party.PartyIdentification", "PTY", false, ["partyId": "partyId"],
                [["field-name": "partyIdentificationTypeId", "value": "SHOPIFY_CUST_ID"]],null)

                dynamicView.addMemberEntity("PCONTECH", "org.apache.ofbiz.party.contact.PartyContactMech", "PTY", true, ["partyId": "partyId"],
                [["date-filter": "true"]],null)

                dynamicView.addMemberEntity("PCONEML", "org.apache.ofbiz.party.contact.PartyContactMechPurpose", "PCONTECH", true,
                ["partyId": "partyId", "contactMechId": "contactMechId"],
                [["field-name": "contactMechPurposeTypeId", "value": "PRIMARY_EMAIL"]],null)

                dynamicView.addMemberEntity("CONEMIL", "org.apache.ofbiz.party.contact.ContactMech", "PCONEML", true,
                ["contactMechId": "contactMechId"])

                dynamicView.addMemberEntity("PCONPHON", "org.apache.ofbiz.party.contact.PartyContactMechPurpose", "PCONTECH", true,
                ["partyId": "partyId", "contactMechId": "contactMechId"],
                [["field-name": "contactMechPurposeTypeId", "value": "PRIMARY_PHONE"]],null)

                dynamicView.addMemberEntity("CONTELE", "org.apache.ofbiz.party.contact.ContactMech", "PCONPHON", true,
                ["contactMechId": "contactMechId"],
                [["field-name": "contactMechTypeId", "value": "TELECOM_NUMBER"]],null)

                dynamicView.addMemberEntity("TELECOM", "org.apache.ofbiz.party.contact.TelecomNumber", "CONTELE", true,
                ["contactMechId": "contactMechId"])


                // Add entity conditions
                dynamicView.addWhereConditions([
                ["entity-alias": "NSPID", "field-name": "partyId", "operator": "equals", "value": ""],
                ["entity-alias": "PROLE", "field-name": "roleTypeId", "operator": "equals", "value": "CUSTOMER"]
                ])

                dynamicView.addAlias("PER", "HCCustomerId", "partyId",null)
                dynamicView.addAlias("PER", "firstName", "firstName" ,null)
                dynamicView.addAlias("PER", "lastName", "lastName",null)
                dynamicView.addAlias("PID", "HCShopifyCustomerId", "idValue",null)
                dynamicView.addAlias("CONEMIL", "email", "infoString", "max")
                dynamicView.addAlias("TELECOM", "countryCode", "countryCode", "max")
                dynamicView.addAlias("TELECOM", "areaCode", "areaCode", "max")
                dynamicView.addAlias("TELECOM", "contactNumber", "contactNumber", "max")

                logger.info("==dynamicView.getViewEntityNode()=====" + dynamicView.getViewEntityNode())

                def eligibleOrders = entityFind.list()

                logger.info("==dynamic: " + eligibleOrders)

            </script>
        </actions>
    </service>
</services>