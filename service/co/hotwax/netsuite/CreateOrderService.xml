<?xml version="1.0" encoding="UTF-8"?>
<services xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="http://moqui.org/xsd/service-definition-3.xsd">
    <service verb="generate" noun="OrdersFeedForNetSuite" authenticate="anonymous-all" transaction-timeout="7200">
        <in-parameters>
            <parameter name="orderId">
                <description>Parameter to fetch Order details for a specific orderId.</description>
            </parameter>
            <parameter name="systemMessageTypeId" required="true">
                <description>The System Message Type ID for generating the Orders Feed for Netsuite.</description>
            </parameter>
            <parameter name="systemMessageRemoteId" required="true">
                <description>The System Message Remote Id for generating the Orders Feed for Netsuite.</description>
            </parameter>
        </in-parameters>
        <actions>
            <set field="nowDate" from="ec.user.nowTimestamp"/>
            <log message="Generating Create Orders Feed file of HotWax for Order ${orderId} at time ${nowDate}"/>
            <script>
                import com.fasterxml.jackson.core.JsonGenerator
                import com.fasterxml.jackson.core.JsonFactory
                import com.fasterxml.jackson.databind.ObjectMapper
                import java.nio.charset.StandardCharsets
                import org.moqui.entity.EntityCondition

                netsuiteOrders_find = ec.entity.find("co.hotwax.order.EligibleOrdersForNetSuiteView")
                if(orderId) netsuiteOrders_find.condition("orderId", orderId)

                // Using try-with-resources to automatically close the EntityListIterator 'ordersItr'
                try (ordersItr = netsuiteOrders_find.iterator()) {
            </script>

            <if condition="!ordersItr.hasNext()">
                <script>ordersItr.close()</script>
                <return message="No eligible orders at ${nowDate}, not generating the HotWax Feed file."/>
            </if>

            <!-- Fetch the receivePath from SystemMessageType to prepare the path for creating the file in the receiving system. Ex: Moqui's datamanager directory in runtime for creating feeds.-->
            <entity-find-one entity-name="moqui.service.message.SystemMessageType" value-field="systemMessageType"/>
            <if condition="systemMessageType == null"><return error="true" message="Could not find SystemMessageType with ID ${systemMessageTypeId}"/></if>

            <!-- Prepare JSON File Path -->
            <!-- Using receivePath from SystemMessageType to prepare the jsonFilePathRef.-->
            <set field="jsonFilePathRef" from="ec.resource.expand(systemMessageType.receivePath, null,
                [contentRoot: ec.user.getPreference('mantle.content.root') ?: 'dbresource://datamanager', date:ec.l10n.format(nowDate, 'yyyy-MM-dd'),
                dateTime:ec.l10n.format(nowDate, 'yyyy-MM-dd-HH-mm-ss-SSS')], false)"/>
            <set field="jsonFilePath" from="ec.resource.getLocationReference(jsonFilePathRef).getUri().getPath()"/>

            <!-- Prepare the Feed File  -->
            <script>

                try {
                //json file
                File ordersFeedFile = new File(jsonFilePath)
                if (!ordersFeedFile.parentFile.exists()) ordersFeedFile.parentFile.mkdirs()
                JsonFactory jsonFactory = new JsonFactory()

                /* Declaring the PrintWriter and JsonGenerator resources in the the try statement,
                so that they are automatically closed regardless of whether the try statement completes normally or abruptly. */
                try (PrintWriter pw = new PrintWriter(StandardCharsets.UTF_8, ordersFeedFile);
                JsonGenerator generator = jsonFactory.createGenerator(pw)) {
                generator.writeStartArray()
            </script>

            <iterate list="ordersItr" entry="order">
                <log message="order: ${order.orderId}"/>
                
                <entity-find entity-name="org.apache.ofbiz.order.order.OrderPaymentPreference" list="GiftCardPaymentList">
                    <econdition field-name="paymentMethodTypeId" value="EXT_GIFT_CARD"/>
                </entity-find>

                <!-- Initialize total amount -->
                <set field="totalNonRefundedGiftCardAmount" from="0"/>

                <!-- Process the gift card payments -->
                <script><![CDATA[
                    def manualRefSet = new HashSet()  // To track processed gift cards
                    def refundedSet = new HashSet()  // To track refunded gift cards

                    // Classify payments into refunded and non-refunded
                    for (giftCardPayment in giftCardPayments) {
                        if (giftCardPayment.parentRefNumber) {
                            refundedSet.add(giftCardPayment.parentRefNumber)
                        }
                    }

                    // Sum only non-refunded gift cards
                    for (giftCardPayment in giftCardPayments) {
                        if (!refundedSet.contains(giftCardPayment.manualRefNumber) && !manualRefSet.contains(giftCardPayment.manualRefNumber)) {
                            totalNonRefundedGiftCardAmount += giftCardPayment.amount
                            manualRefSet.add(giftCardPayment.manualRefNumber)
                        }
                    }
                ]]></script>
                <!-- Set orderItemList List to add the order Item Detail map -->
                <set field="orderItemList" from="[]"/>
                <entity-find entity-name="co.hotwax.order.OrderItemsForNetSuiteView" list="orderItemsList">
                    <econdition field-name="orderId" operator="equals" from="order.orderId"/>
                </entity-find>

                <if condition="!orderItemsList">
                    <log message="There is no eligible order items for this order"/>
                    <continue/>
                </if>

                <iterate list="orderItemsList" entry="orderItem">
                    <log message="orderItemSeqId: ${orderItem.orderItemSeqId}"/>
                    <set field="orderItemDetail" from="orderItem.getMap()"/>
                    <script>
                        orderItemList.add(orderItemDetail)
                    </script>
                    <entity-find entity-name="org.apache.ofbiz.order.order.OrderAdjustment" list="orderAdjustmentList">
                        <econdition field-name="orderId" from="order.orderId"/>
                        <econdition field-name="orderItemSeqId" from="orderItem.orderItemSeqId"/>
                        <econdition field-name="orderAdjustmentTypeId" value="EXT_PROMO_ADJUSTMENT"/>
                    </entity-find>

                    <log message="orderAdjustmentList: ${orderAdjustmentList}"/>

                    <!-- If promotional adjustments exist, add a duplicate with promotion-specific details -->
                    <if condition="orderAdjustmentList &amp;&amp; orderAdjustmentList.size() > 0">
                        <log message="Creating duplicate for orderItemSeqId: ${orderItem.orderItemSeqId} due to promotion"/>
                        <!-- Calculate the total promotion amount -->
                        <set field="totalPromotionAmount" default-value="0" type="Integer"/>
                        <iterate list="orderAdjustmentList" entry="adjustment">
                            <log message="adjustment.amount: ${adjustment.amount}"/>
                            <set field="totalPromotionAmount" from="totalPromotionAmount + adjustment.amount"/>
                        </iterate>

                        <!-- Create a duplicate order item with updated price -->
                        <script><![CDATA[
                            Map<String, Object> promoOrderItemDetail = new HashMap<>(orderItemDetail)
                            promoOrderItemDetail.put("price", totalPromotionAmount)
                            orderItemList.add(promoOrderItemDetail)
                        ]]></script>
                    </if>

                </iterate>

                <!-- Prepare the Order Detail map -->
                <set field="orderDetail" from="order.getMap() + [ HCGiftCardPayment:totalNonRefundedGiftCardAmount, orderItems:orderItemList]"/>

                <script>
                    new ObjectMapper()
                    .setDateFormat(new java.text.SimpleDateFormat(System.getProperty('default_date_time_format')))
                    .writerWithDefaultPrettyPrinter().writeValue(generator, orderDetail)

                </script>
            </iterate>
            <script>
                        generator.writeEndArray()
                    }
                } catch (IOException e) {
                    logger.error("Error preparing Order Feed files", e)
                }
                }
            </script>
             <!-- Save the Json Feed File path in System Message messageText -->
            <service-call name="org.moqui.impl.SystemMessageServices.queue#SystemMessage"
                    in-map="[messageText:jsonFilePathRef, systemMessageTypeId:systemMessageTypeId,
                    systemMessageRemoteId:systemMessageRemoteId]" out-map="systemMessageOut"/>

            <return message="Created the Order Feed file at time ${ec.user.nowTimestamp} with type ${systemMessageTypeId}
                and remote ${systemMessageRemoteId} saved response in messages
                ${systemMessageOut.systemMessageId}"/>
        </actions>
    </service>
</services>