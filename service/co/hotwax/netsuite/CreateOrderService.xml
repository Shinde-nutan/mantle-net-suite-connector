<?xml version="1.0" encoding="UTF-8"?>
<services xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="http://moqui.org/xsd/service-definition-3.xsd">
    <service verb="prepare" noun="OrdersFeedDataForNetSuite">
        <in-parameters>
            <parameter name="orderId">
                <description>Parameter to fetch Order details for a specific orderId.</description>
            </parameter>
        </in-parameters>
        <out-parameters>
            <parameter name="orderMap"/>
        </out-parameters>
        <actions>
            <log message="order: ${orderId}"/>
            <entity-find entity-name="co.hotwax.order.OrdersDetailsForNetSuiteView" list="orderLevelDetailList">
                <econdition field-name="orderId" from="orderId"/>
            </entity-find>
            <set field="orderDetails" from="orderLevelDetailList[0]"/>

            <!-- Set orderItemList List to add the order Item Detail map -->
            <set field="orderItemList" from="[]"/>
            <entity-find entity-name="co.hotwax.order.OrderItemsForNetSuiteView" list="orderItemsList">
                <econdition field-name="orderId" operator="equals" from="orderDetails.orderId"/>
            </entity-find>

            <if condition="!orderItemsList">
                <set field="orderMap" from="[]"/>
                <return message="There is no eligible order items for this order" />
            </if>

            <iterate list="orderItemsList" entry="orderItem">
                <log message="orderItemSeqId: ${orderItem.orderItemSeqId}"/>
                <script>
                    orderItemList.add(orderItem.getMap())
                </script>
            </iterate>
            <!-- Prepare the Order Detail map -->
            <set field="orderMap" from="orderDetails.getMap() + [orderItems:orderItemList]"/>
        </actions>
    </service>

    <service verb="add" noun="BusinessLogicInFeedData">
        <in-parameters>
            <parameter name="orderMap" type="Map"/>
        </in-parameters>
        <out-parameters>
            <parameter name="orderMapDetail" type="Map"/>
        </out-parameters>
        <actions>

            <!-- Create a New Map for Processed Data -->
            <script><![CDATA[
                Map<String, Object> processedOrderMap = new HashMap<>(orderMap);

                 String preparePhoneNumber(String... parts) {
                    return parts.findAll { it }?.join(' ') ?: null // Filter non-null and non-empty parts, join with space
                }

                // Prepare billing and shipping phone numbers
                String billingPhone = preparePhoneNumber(orderMap.billingCountryCode, orderMap.billingAreaCode, orderMap.billingContactNumber)
                String shippingPhone = preparePhoneNumber(orderMap.shippingCountryCode, orderMap.shippingAreaCode, orderMap.shippingContactNumber)

                // Add results to the processed map, defaulting to empty string if null
                processedOrderMap.billingPhone = billingPhone ?: " "
                processedOrderMap.phone = shippingPhone ?: " "

                // Remove the original phone-related fields from orderMap
                processedOrderMap.remove("billingCountryCode")
                processedOrderMap.remove("billingAreaCode")
                processedOrderMap.remove("billingContactNumber")
                processedOrderMap.remove("shippingCountryCode")
                processedOrderMap.remove("shippingAreaCode")
                processedOrderMap.remove("shippingContactNumber")

                // Logic to use shipping address as billing address if billing details are missing
                if (!orderMap.billingContactMechId && orderMap.shippingContactMachId) {
                    log.info("Billing address is missing. Using shipping address as billing address.");
                    processedOrderMap.put("billingAddress1", orderMap.shippingAddress1);
                    processedOrderMap.put("billingAddress2", orderMap.shippingAddress2);
                    processedOrderMap.put("billingCity", orderMap.shippingCity);
                    processedOrderMap.put("billingState", orderMap.shippingState);
                    processedOrderMap.put("billingCountry", orderMap.shippingCountry);
                    processedOrderMap.put("billingPostalCode", orderMap.shippingPostalCode);
                }
            ]]></script>

            <!-- Process Gift Card Payments -->
            <entity-find entity-name="org.apache.ofbiz.order.order.OrderPaymentPreference" list="GiftCardPaymentList">
                <econdition field-name="paymentMethodTypeId" value="EXT_GIFT_CARD"/>
                <econdition field-name="orderId" from="orderMap.orderId"/>
            </entity-find>

            <!-- Initialize total amount for non-refunded gift cards -->
            <set field="totalNonRefundedGiftCardAmount" type="Integer"/>

            <!-- Logic to sum non-refunded gift card payments -->
            <script><![CDATA[
                def manualRefSet = new HashSet()
                def refundedSet = new HashSet()

                for (giftCardPayment in GiftCardPaymentList) {
                    if (giftCardPayment.parentRefNumber) {
                        refundedSet.add(giftCardPayment.parentRefNumber)
                    }
                }

                for (giftCardPayment in GiftCardPaymentList) {
                    if (!refundedSet.contains(giftCardPayment.manualRefNumber) && !manualRefSet.contains(giftCardPayment.manualRefNumber)) {
                        totalNonRefundedGiftCardAmount += giftCardPayment.amount
                        manualRefSet.add(giftCardPayment.manualRefNumber)
                    }
                }
            ]]></script>

            <!-- Add Gift Card Amount to the Order Map -->
            <script><![CDATA[
                processedOrderMap.put("HCGiftCardPayment", totalNonRefundedGiftCardAmount)
                processedOrderMap.put("taxCode", "AVATAX")
                if ("POS Channel" != orderMap.salesChannel){
                    processedOrderMap.put("shippingTaxCode", "AVATAX")
                }
                else{
                    processedOrderMap.put("shippingTaxCode", "")
                }
            ]]></script>
            
            <!-- Process Order Items -->
            <set field="orderItemList" from="orderMap.orderItems"/>
            <script><![CDATA[ List<Map<String, Object>> processedOrderItemList = new ArrayList<>(); ]]></script>
            <iterate list="orderItemList" entry="orderItem">
                <!-- Determine if the item is closed -->
                <script><![CDATA[
                    Map<String, Object> processedOrderItem = new HashMap<>(orderItem);
                    boolean isClosed = "ITEM_CANCELLED".equalsIgnoreCase(orderItem.itemStatus);
                    processedOrderItem.put("closed", isClosed);
                    processedOrderItem.remove("itemStatus");
                    processedOrderItem.put("orderLineId", processedOrderItem.orderItemSeqId)
                    processedOrderItem.put("priceLevel", "custom")

                ]]></script>

                <!-- Map Shipping Method -->
                <entity-find entity-name="co.hotwax.integration.IntegrationTypeMappingAndEnum" list="ShippingMethodMappingList">
                    <econdition field-name="integrationTypeId" value="NETSUITE_SHP_MTHD"/>
                    <econdition field-name="mappingKey" from="orderItem.shipmentMethodTypeId"/>
                </entity-find>
                <if condition="!ShippingMethodMappingList.isEmpty()">
                    <script><![CDATA[
                        processedOrderItem.put("shippingMethod", ShippingMethodMappingList[0].mappingValue)
                        processedOrderItem.remove("shipmentMethodTypeId")
                    ]]></script>
                    <else>
                        <!--TODO: currently setting the shipment method as empty as in case of pos_completed method we does not have itm available-->
                        <script><![CDATA[
                        processedOrderItem.put("shippingMethod", "")
                        processedOrderItem.remove("shipmentMethodTypeId")
                    ]]></script>
                    </else>
                </if>

                <entity-find entity-name="co.hotwax.facility.FacilityIdentification" list="facilityIdentificationList">
                    <econdition field-name="facilityId" from="orderItem.location"/>
                    <econdition field-name="facilityIdenTypeId" value="ORDR_ORGN_DPT"/>
                    <date-filter/>
                </entity-find>

                <if condition="!facilityIdentificationList.isEmpty() &amp;&amp; 'POS Channel' == orderMap.salesChannel">
                    <script><![CDATA[
                        processedOrderItem.put("department", facilityIdentificationList[0].idValue)
                    ]]></script>
                </if>

                <script>processedOrderItemList.add(processedOrderItem);</script>

                <!-- Process Promotions -->
                <entity-find entity-name="org.apache.ofbiz.order.order.OrderAdjustment" list="orderAdjustmentList">
                    <econdition field-name="orderId" from="orderMap.orderId"/>
                    <econdition field-name="orderItemSeqId" from="orderItem.orderItemSeqId"/>
                    <econdition field-name="orderAdjustmentTypeId" value="EXT_PROMO_ADJUSTMENT"/>
                </entity-find>
                <if condition="orderAdjustmentList &amp;&amp; orderAdjustmentList.size() > 0">

                    <set field="totalPromotionAmount" default-value="0" type="BigDecimal"/>
                    <iterate list="orderAdjustmentList" entry="adjustment">
                        <set field="totalPromotionAmount" from="totalPromotionAmount + adjustment.amount"/>
                    </iterate>

                    <!-- Duplicate Item for Promotion -->
                    <!--TODO: currently making the copy as-is from the original item map need to re-visit this -->
                    <script><![CDATA[
                        Map<String, Object> promoOrderItemDetail = new HashMap<>(processedOrderItem);
                        promoOrderItemDetail.put("price", totalPromotionAmount);
                        promoOrderItemDetail.put("isDiscountRow", "true");
                        processedOrderItemList.add(promoOrderItemDetail);
                    ]]></script>
                </if>
            </iterate>

            <!-- Add Processed Order Items to Processed Order Map -->
            <script><![CDATA[
                processedOrderMap.put("externalId", processedOrderMap.orderId)
                processedOrderMap.put("orderItems", processedOrderItemList);
            ]]></script>
            <!-- Prepare the Final Order Detail Map -->

            <set field="orderMapDetail" from="processedOrderMap"/>
        </actions>
    </service>

    <service verb="generate" noun="CreateOrderFeed" authenticate="anonymous-all" transaction-timeout="7200">
        <in-parameters>
            <parameter name="orderId">
                <description>Parameter to fetch Order details for a specific orderId.</description>
            </parameter>
            <parameter name="systemMessageTypeId" required="true">
                <description>The System Message Type ID for generating the Orders Feed for Netsuite.</description>
            </parameter>
            <parameter name="systemMessageRemoteId" required="true">
                <description>The System Message Remote Id for generating the Orders Feed for Netsuite.</description>
            </parameter>
            <parameter name="fromOrderDate">
                <description>Parameter to fetch Order details after specific order date</description>
            </parameter>
            <parameter name="thruOrderDate">
                <description>Parameter to fetch Order details after specific order date</description>
            </parameter>
            <parameter name="salesChannel">
                <description>Parameter to fetch Order details for specific sales channel</description>
            </parameter>
        </in-parameters>
        <actions>
            <set field="nowDate" from="ec.user.nowTimestamp"/>
            <log message="Generating Order Feed file for Order ${orderId} at time ${nowDate}"/>
            <!-- Prepare csv File Path -->
            <set field="contentRoot" from="ec.user.getPreference('mantle.content.root') ?: 'dbresource://datamanager'"/>
            <set field="csvFilePathRef" value="${contentRoot}/NetsuiteOrderFeed/CreateOrderItemsFeed-${ec.l10n.format(ec.user.nowTimestamp, 'yyyy-MM-dd-HH-mm-ss', null, TimeZone.getDefault())}.csv"/>
            <set field="csvFilePath" from="ec.resource.getLocationReference(csvFilePathRef).getUri().getPath()"/>

            <script>

                import org.apache.commons.csv.CSVFormat
                import org.apache.commons.csv.CSVPrinter
                import java.nio.file.Files
                import java.nio.file.Paths
                import java.nio.charset.StandardCharsets
                import org.moqui.entity.EntityCondition

                File csvFile = new File(csvFilePath)
                if (!csvFile.parentFile.exists()) { csvFile.parentFile.mkdirs()}

                // Prepare CSV Writer
                def writer = Files.newBufferedWriter(Paths.get(csvFilePath), StandardCharsets.UTF_8)
                def csvHeaders = null
                def csvPrinter = null

                netsuiteOrders_find = ec.entity.find("co.hotwax.order.EligibleOrdersForNetSuiteView")
                if(orderId) netsuiteOrders_find.condition("orderId", orderId)
                if(salesChannel) netsuiteOrders_find.condition("salesChannelEnumId", salesChannel)
                if(fromOrderDate) netsuiteOrders_find.condition("orderDate", EntityCondition.ComparisonOperator.GREATER_THAN, fromOrderDate)
                if(thruOrderDate) netsuiteOrders_find.condition("orderDate", EntityCondition.ComparisonOperator.LESS_THAN, fromOrderDate)

                // Using try-with-resources to automatically close the EntityListIterator 'ordersItr'
                try (ordersItr = netsuiteOrders_find.iterator()) {
            </script>

            <if condition="!ordersItr.hasNext()">
                <script>ordersItr.close()</script>
                <return message="No eligible orders at ${nowDate}, not generating the HotWax Feed file."/>
            </if>

            <!-- Fetch the receivePath from SystemMessageType to prepare the path for creating the file in the receiving system. Ex: Moqui's datamanager directory in runtime for creating feeds.-->
            <entity-find-one entity-name="moqui.service.message.SystemMessageType" value-field="systemMessageType"/>
            <if condition="systemMessageType == null">
                <return error="true" message="Could not find SystemMessageType with ID ${systemMessageTypeId}"/>
            </if>

            <iterate list="ordersItr" entry="order">
                <service-call name="co.hotwax.netsuite.OrderServices.prepare#OrdersFeedDataForNetSuite" in-map="[orderId:order.orderId]"
                    out-map="context"/>
                <set field="orderMap" from="context?.orderMap"/>
                <if condition="orderMap">
                    <service-call name="co.hotwax.netsuite.OrderServices.add#BusinessLogicInFeedData" in-map="[orderMap:orderMap]"
                        out-map="orderMapOut"/>

                    <entity-find-one entity-name="moqui.service.message.SystemMessageTypeParameter" value-field="groovyFileResource">
                        <field-map field-name="systemMessageTypeId" from="systemMessageTypeId"/>
                        <field-map field-name="parameterName" value="resourcePath"/>
                    </entity-find-one>
                    <if condition="groovyFileResource">
                        <set field="scriptPath" from="groovyFileResource.parameterValue"/>
                        <script>
                            Object result = ec.resource.script(scriptPath, null)
                            context.result = result
                        </script>
                        <else>
                            <log message="No groovy file found"/>
                            <set field="result" from="orderMapOut.orderMapDetail"/>
                        </else>
                    </if>
                    <script>
                        def order = context.get("result")
                        def orderItems = order.remove("orderItems")
                        def orderId = order.remove("orderName")
                        def flattenedOrders = []
                        orderItems.each { item ->
                            item.put("orderId", orderId)
                            item.remove("orderItemSeqId")
                            item.remove("isDiscountRow")
                            item.remove("productId")
                            item.put("item", item.remove("NetSuiteProductId"))
                            def flattenedOrder = [:]
                            flattenedOrder.putAll(order)
                            item.each { key, value -> flattenedOrder["$key"] = value }
                            flattenedOrders.add(flattenedOrder)
                        }
                        context.flattenedOrders = flattenedOrders

                        // Dynamically determine headers in the first iteration
                        if (!csvHeaders) {
                            csvHeaders = flattenedOrders[0].keySet().collect { it as String }
                            csvPrinter = new CSVPrinter(writer, CSVFormat.DEFAULT.withHeader(csvHeaders as String[]))
                        }

                        // Write rows to the CSV
                        if (csvPrinter  &amp;&amp; !flattenedOrders.isEmpty()) {
                            System.out.println("writing the data in csv file")
                            flattenedOrders.each { record ->
                                csvPrinter.printRecord(record.values())
                            }
                        }
                    </script>
                </if>
            </iterate>
            <script>
                }
                if (csvPrinter) {
                    csvPrinter.flush()
                    csvPrinter.close()
                }
            </script>
            <!-- Save the Json Feed File path in System Message messageText -->
            <service-call name="org.moqui.impl.SystemMessageServices.receive#IncomingSystemMessage"
                in-map="[systemMessageTypeId:systemMessageTypeId, systemMessageRemoteId:systemMessageRemoteId,
                messageText:csvFilePath]" out-map="FeedSysMsgOut"/>

            <log message="Generating  Order Items Feed file with type ${systemMessageTypeId} and
                remote ${systemMessageRemoteId} saved response in messages ${FeedSysMsgOut.systemMessageIdList}"/>
        </actions>
    </service>
</services>